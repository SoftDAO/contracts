// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Adjust extends ethereum.Event {
  get params(): Adjust__Params {
    return new Adjust__Params(this);
  }
}

export class Adjust__Params {
  _event: Adjust;

  constructor(event: Adjust) {
    this._event = event;
  }

  get beneficiary(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Claim extends ethereum.Event {
  get params(): Claim__Params {
    return new Claim__Params(this);
  }
}

export class Claim__Params {
  _event: Claim;

  constructor(event: Claim) {
    this._event = event;
  }

  get beneficiary(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class CrosschainClaim extends ethereum.Event {
  get params(): CrosschainClaim__Params {
    return new CrosschainClaim__Params(this);
  }
}

export class CrosschainClaim__Params {
  _event: CrosschainClaim;

  constructor(event: CrosschainClaim) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get beneficiary(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get recipientDomain(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class DelegateChanged extends ethereum.Event {
  get params(): DelegateChanged__Params {
    return new DelegateChanged__Params(this);
  }
}

export class DelegateChanged__Params {
  _event: DelegateChanged;

  constructor(event: DelegateChanged) {
    this._event = event;
  }

  get delegator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get fromDelegate(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get toDelegate(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class DelegateVotesChanged extends ethereum.Event {
  get params(): DelegateVotesChanged__Params {
    return new DelegateVotesChanged__Params(this);
  }
}

export class DelegateVotesChanged__Params {
  _event: DelegateVotesChanged;

  constructor(event: DelegateVotesChanged) {
    this._event = event;
  }

  get delegate(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get previousBalance(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newBalance(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class InitializeDistributionRecord extends ethereum.Event {
  get params(): InitializeDistributionRecord__Params {
    return new InitializeDistributionRecord__Params(this);
  }
}

export class InitializeDistributionRecord__Params {
  _event: InitializeDistributionRecord;

  constructor(event: InitializeDistributionRecord) {
    this._event = event;
  }

  get beneficiary(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get total(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class InitializeDistributor extends ethereum.Event {
  get params(): InitializeDistributor__Params {
    return new InitializeDistributor__Params(this);
  }
}

export class InitializeDistributor__Params {
  _event: InitializeDistributor;

  constructor(event: InitializeDistributor) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get total(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get uri(): string {
    return this._event.parameters[2].value.toString();
  }

  get fractionDenominator(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SetDelay extends ethereum.Event {
  get params(): SetDelay__Params {
    return new SetDelay__Params(this);
  }
}

export class SetDelay__Params {
  _event: SetDelay;

  constructor(event: SetDelay) {
    this._event = event;
  }

  get maxDelayTime(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SetSweepRecipient extends ethereum.Event {
  get params(): SetSweepRecipient__Params {
    return new SetSweepRecipient__Params(this);
  }
}

export class SetSweepRecipient__Params {
  _event: SetSweepRecipient;

  constructor(event: SetSweepRecipient) {
    this._event = event;
  }

  get recipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SetToken extends ethereum.Event {
  get params(): SetToken__Params {
    return new SetToken__Params(this);
  }
}

export class SetToken__Params {
  _event: SetToken;

  constructor(event: SetToken) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SetTotal extends ethereum.Event {
  get params(): SetTotal__Params {
    return new SetTotal__Params(this);
  }
}

export class SetTotal__Params {
  _event: SetTotal;

  constructor(event: SetTotal) {
    this._event = event;
  }

  get total(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SetUri extends ethereum.Event {
  get params(): SetUri__Params {
    return new SetUri__Params(this);
  }
}

export class SetUri__Params {
  _event: SetUri;

  constructor(event: SetUri) {
    this._event = event;
  }

  get uri(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class SetVoteFactor extends ethereum.Event {
  get params(): SetVoteFactor__Params {
    return new SetVoteFactor__Params(this);
  }
}

export class SetVoteFactor__Params {
  _event: SetVoteFactor;

  constructor(event: SetVoteFactor) {
    this._event = event;
  }

  get voteFactor(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SweepNative extends ethereum.Event {
  get params(): SweepNative__Params {
    return new SweepNative__Params(this);
  }
}

export class SweepNative__Params {
  _event: SweepNative;

  constructor(event: SweepNative) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SweepToken extends ethereum.Event {
  get params(): SweepToken__Params {
    return new SweepToken__Params(this);
  }
}

export class SweepToken__Params {
  _event: SweepToken;

  constructor(event: SweepToken) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CrosschainDistributor__checkpointsResultValue0Struct extends ethereum.Tuple {
  get fromBlock(): BigInt {
    return this[0].toBigInt();
  }

  get votes(): BigInt {
    return this[1].toBigInt();
  }
}

export class CrosschainDistributor__getDistributionRecordResultValue0Struct extends ethereum.Tuple {
  get initialized(): boolean {
    return this[0].toBoolean();
  }

  get total(): BigInt {
    return this[1].toBigInt();
  }

  get claimed(): BigInt {
    return this[2].toBigInt();
  }
}

export class CrosschainDistributor extends ethereum.SmartContract {
  static bind(address: Address): CrosschainDistributor {
    return new CrosschainDistributor("CrosschainDistributor", address);
  }

  DOMAIN_SEPARATOR(): Bytes {
    let result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  NAME(): string {
    let result = super.call("NAME", "NAME():(string)", []);

    return result[0].toString();
  }

  try_NAME(): ethereum.CallResult<string> {
    let result = super.tryCall("NAME", "NAME():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  VERSION(): BigInt {
    let result = super.call("VERSION", "VERSION():(uint256)", []);

    return result[0].toBigInt();
  }

  try_VERSION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("VERSION", "VERSION():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkpoints(
    account: Address,
    pos: BigInt
  ): CrosschainDistributor__checkpointsResultValue0Struct {
    let result = super.call(
      "checkpoints",
      "checkpoints(address,uint32):((uint32,uint224))",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(pos)
      ]
    );

    return changetype<CrosschainDistributor__checkpointsResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_checkpoints(
    account: Address,
    pos: BigInt
  ): ethereum.CallResult<CrosschainDistributor__checkpointsResultValue0Struct> {
    let result = super.tryCall(
      "checkpoints",
      "checkpoints(address,uint32):((uint32,uint224))",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(pos)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<CrosschainDistributor__checkpointsResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  claimed(): BigInt {
    let result = super.call("claimed", "claimed():(uint256)", []);

    return result[0].toBigInt();
  }

  try_claimed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("claimed", "claimed():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  connext(): Address {
    let result = super.call("connext", "connext():(address)", []);

    return result[0].toAddress();
  }

  try_connext(): ethereum.CallResult<Address> {
    let result = super.tryCall("connext", "connext():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  delegates(account: Address): Address {
    let result = super.call("delegates", "delegates(address):(address)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toAddress();
  }

  try_delegates(account: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("delegates", "delegates(address):(address)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  distancePerSecond(): BigInt {
    let result = super.call(
      "distancePerSecond",
      "distancePerSecond():(uint160)",
      []
    );

    return result[0].toBigInt();
  }

  try_distancePerSecond(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "distancePerSecond",
      "distancePerSecond():(uint160)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  domain(): BigInt {
    let result = super.call("domain", "domain():(uint32)", []);

    return result[0].toBigInt();
  }

  try_domain(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("domain", "domain():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getClaimableAmount(beneficiary: Address): BigInt {
    let result = super.call(
      "getClaimableAmount",
      "getClaimableAmount(address):(uint256)",
      [ethereum.Value.fromAddress(beneficiary)]
    );

    return result[0].toBigInt();
  }

  try_getClaimableAmount(beneficiary: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getClaimableAmount",
      "getClaimableAmount(address):(uint256)",
      [ethereum.Value.fromAddress(beneficiary)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDistributionRecord(
    beneficiary: Address
  ): CrosschainDistributor__getDistributionRecordResultValue0Struct {
    let result = super.call(
      "getDistributionRecord",
      "getDistributionRecord(address):((bool,uint120,uint120))",
      [ethereum.Value.fromAddress(beneficiary)]
    );

    return changetype<
      CrosschainDistributor__getDistributionRecordResultValue0Struct
    >(result[0].toTuple());
  }

  try_getDistributionRecord(
    beneficiary: Address
  ): ethereum.CallResult<
    CrosschainDistributor__getDistributionRecordResultValue0Struct
  > {
    let result = super.tryCall(
      "getDistributionRecord",
      "getDistributionRecord(address):((bool,uint120,uint120))",
      [ethereum.Value.fromAddress(beneficiary)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<
        CrosschainDistributor__getDistributionRecordResultValue0Struct
      >(value[0].toTuple())
    );
  }

  getFairDelayTime(user: Address): BigInt {
    let result = super.call(
      "getFairDelayTime",
      "getFairDelayTime(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_getFairDelayTime(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getFairDelayTime",
      "getFairDelayTime(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getFractionDenominator(): BigInt {
    let result = super.call(
      "getFractionDenominator",
      "getFractionDenominator():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getFractionDenominator(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getFractionDenominator",
      "getFractionDenominator():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPastTotalSupply(blockNumber: BigInt): BigInt {
    let result = super.call(
      "getPastTotalSupply",
      "getPastTotalSupply(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(blockNumber)]
    );

    return result[0].toBigInt();
  }

  try_getPastTotalSupply(blockNumber: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPastTotalSupply",
      "getPastTotalSupply(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(blockNumber)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPastVotes(account: Address, blockNumber: BigInt): BigInt {
    let result = super.call(
      "getPastVotes",
      "getPastVotes(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(blockNumber)
      ]
    );

    return result[0].toBigInt();
  }

  try_getPastVotes(
    account: Address,
    blockNumber: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPastVotes",
      "getPastVotes(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(blockNumber)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSweepRecipient(): Address {
    let result = super.call(
      "getSweepRecipient",
      "getSweepRecipient():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getSweepRecipient(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getSweepRecipient",
      "getSweepRecipient():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTotalVotes(): BigInt {
    let result = super.call("getTotalVotes", "getTotalVotes():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getTotalVotes(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalVotes",
      "getTotalVotes():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVestedFraction(beneficiary: Address, time: BigInt): BigInt {
    let result = super.call(
      "getVestedFraction",
      "getVestedFraction(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(beneficiary),
        ethereum.Value.fromUnsignedBigInt(time)
      ]
    );

    return result[0].toBigInt();
  }

  try_getVestedFraction(
    beneficiary: Address,
    time: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getVestedFraction",
      "getVestedFraction(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(beneficiary),
        ethereum.Value.fromUnsignedBigInt(time)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVoteFactor(param0: Address): BigInt {
    let result = super.call(
      "getVoteFactor",
      "getVoteFactor(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_getVoteFactor(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getVoteFactor",
      "getVoteFactor(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVotes(account: Address): BigInt {
    let result = super.call("getVotes", "getVotes(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_getVotes(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getVotes", "getVotes(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxDelayTime(): BigInt {
    let result = super.call("maxDelayTime", "maxDelayTime():(uint160)", []);

    return result[0].toBigInt();
  }

  try_maxDelayTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxDelayTime", "maxDelayTime():(uint160)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nonces(owner: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_nonces(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  numCheckpoints(account: Address): BigInt {
    let result = super.call(
      "numCheckpoints",
      "numCheckpoints(address):(uint32)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_numCheckpoints(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numCheckpoints",
      "numCheckpoints(address):(uint32)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  randomValue(): BigInt {
    let result = super.call("randomValue", "randomValue():(uint160)", []);

    return result[0].toBigInt();
  }

  try_randomValue(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("randomValue", "randomValue():(uint160)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  total(): BigInt {
    let result = super.call("total", "total():(uint256)", []);

    return result[0].toBigInt();
  }

  try_total(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("total", "total():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  uri(): string {
    let result = super.call("uri", "uri():(string)", []);

    return result[0].toString();
  }

  try_uri(): ethereum.CallResult<string> {
    let result = super.tryCall("uri", "uri():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  xReceive(
    _transferId: Bytes,
    _amount: BigInt,
    _asset: Address,
    _originSender: Address,
    _origin: BigInt,
    _callData: Bytes
  ): Bytes {
    let result = super.call(
      "xReceive",
      "xReceive(bytes32,uint256,address,address,uint32,bytes):(bytes)",
      [
        ethereum.Value.fromFixedBytes(_transferId),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromAddress(_asset),
        ethereum.Value.fromAddress(_originSender),
        ethereum.Value.fromUnsignedBigInt(_origin),
        ethereum.Value.fromBytes(_callData)
      ]
    );

    return result[0].toBytes();
  }

  try_xReceive(
    _transferId: Bytes,
    _amount: BigInt,
    _asset: Address,
    _originSender: Address,
    _origin: BigInt,
    _callData: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "xReceive",
      "xReceive(bytes32,uint256,address,address,uint32,bytes):(bytes)",
      [
        ethereum.Value.fromFixedBytes(_transferId),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromAddress(_asset),
        ethereum.Value.fromAddress(_originSender),
        ethereum.Value.fromUnsignedBigInt(_origin),
        ethereum.Value.fromBytes(_callData)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}

export class AdjustCall extends ethereum.Call {
  get inputs(): AdjustCall__Inputs {
    return new AdjustCall__Inputs(this);
  }

  get outputs(): AdjustCall__Outputs {
    return new AdjustCall__Outputs(this);
  }
}

export class AdjustCall__Inputs {
  _call: AdjustCall;

  constructor(call: AdjustCall) {
    this._call = call;
  }

  get beneficiary(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AdjustCall__Outputs {
  _call: AdjustCall;

  constructor(call: AdjustCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DelegateCall extends ethereum.Call {
  get inputs(): DelegateCall__Inputs {
    return new DelegateCall__Inputs(this);
  }

  get outputs(): DelegateCall__Outputs {
    return new DelegateCall__Outputs(this);
  }
}

export class DelegateCall__Inputs {
  _call: DelegateCall;

  constructor(call: DelegateCall) {
    this._call = call;
  }

  get delegatee(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DelegateCall__Outputs {
  _call: DelegateCall;

  constructor(call: DelegateCall) {
    this._call = call;
  }
}

export class DelegateBySigCall extends ethereum.Call {
  get inputs(): DelegateBySigCall__Inputs {
    return new DelegateBySigCall__Inputs(this);
  }

  get outputs(): DelegateBySigCall__Outputs {
    return new DelegateBySigCall__Outputs(this);
  }
}

export class DelegateBySigCall__Inputs {
  _call: DelegateBySigCall;

  constructor(call: DelegateBySigCall) {
    this._call = call;
  }

  get delegatee(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get nonce(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get expiry(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class DelegateBySigCall__Outputs {
  _call: DelegateBySigCall;

  constructor(call: DelegateBySigCall) {
    this._call = call;
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class PermitCall extends ethereum.Call {
  get inputs(): PermitCall__Inputs {
    return new PermitCall__Inputs(this);
  }

  get outputs(): PermitCall__Outputs {
    return new PermitCall__Outputs(this);
  }
}

export class PermitCall__Inputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class PermitCall__Outputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetSweepRecipientCall extends ethereum.Call {
  get inputs(): SetSweepRecipientCall__Inputs {
    return new SetSweepRecipientCall__Inputs(this);
  }

  get outputs(): SetSweepRecipientCall__Outputs {
    return new SetSweepRecipientCall__Outputs(this);
  }
}

export class SetSweepRecipientCall__Inputs {
  _call: SetSweepRecipientCall;

  constructor(call: SetSweepRecipientCall) {
    this._call = call;
  }

  get _recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetSweepRecipientCall__Outputs {
  _call: SetSweepRecipientCall;

  constructor(call: SetSweepRecipientCall) {
    this._call = call;
  }
}

export class SetTokenCall extends ethereum.Call {
  get inputs(): SetTokenCall__Inputs {
    return new SetTokenCall__Inputs(this);
  }

  get outputs(): SetTokenCall__Outputs {
    return new SetTokenCall__Outputs(this);
  }
}

export class SetTokenCall__Inputs {
  _call: SetTokenCall;

  constructor(call: SetTokenCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTokenCall__Outputs {
  _call: SetTokenCall;

  constructor(call: SetTokenCall) {
    this._call = call;
  }
}

export class SetTotalCall extends ethereum.Call {
  get inputs(): SetTotalCall__Inputs {
    return new SetTotalCall__Inputs(this);
  }

  get outputs(): SetTotalCall__Outputs {
    return new SetTotalCall__Outputs(this);
  }
}

export class SetTotalCall__Inputs {
  _call: SetTotalCall;

  constructor(call: SetTotalCall) {
    this._call = call;
  }

  get _total(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetTotalCall__Outputs {
  _call: SetTotalCall;

  constructor(call: SetTotalCall) {
    this._call = call;
  }
}

export class SetUriCall extends ethereum.Call {
  get inputs(): SetUriCall__Inputs {
    return new SetUriCall__Inputs(this);
  }

  get outputs(): SetUriCall__Outputs {
    return new SetUriCall__Outputs(this);
  }
}

export class SetUriCall__Inputs {
  _call: SetUriCall;

  constructor(call: SetUriCall) {
    this._call = call;
  }

  get _uri(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetUriCall__Outputs {
  _call: SetUriCall;

  constructor(call: SetUriCall) {
    this._call = call;
  }
}

export class SetVoteFactorCall extends ethereum.Call {
  get inputs(): SetVoteFactorCall__Inputs {
    return new SetVoteFactorCall__Inputs(this);
  }

  get outputs(): SetVoteFactorCall__Outputs {
    return new SetVoteFactorCall__Outputs(this);
  }
}

export class SetVoteFactorCall__Inputs {
  _call: SetVoteFactorCall;

  constructor(call: SetVoteFactorCall) {
    this._call = call;
  }

  get _voteFactor(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetVoteFactorCall__Outputs {
  _call: SetVoteFactorCall;

  constructor(call: SetVoteFactorCall) {
    this._call = call;
  }
}

export class SweepNativeCall extends ethereum.Call {
  get inputs(): SweepNativeCall__Inputs {
    return new SweepNativeCall__Inputs(this);
  }

  get outputs(): SweepNativeCall__Outputs {
    return new SweepNativeCall__Outputs(this);
  }
}

export class SweepNativeCall__Inputs {
  _call: SweepNativeCall;

  constructor(call: SweepNativeCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SweepNativeCall__Outputs {
  _call: SweepNativeCall;

  constructor(call: SweepNativeCall) {
    this._call = call;
  }
}

export class SweepNative1Call extends ethereum.Call {
  get inputs(): SweepNative1Call__Inputs {
    return new SweepNative1Call__Inputs(this);
  }

  get outputs(): SweepNative1Call__Outputs {
    return new SweepNative1Call__Outputs(this);
  }
}

export class SweepNative1Call__Inputs {
  _call: SweepNative1Call;

  constructor(call: SweepNative1Call) {
    this._call = call;
  }
}

export class SweepNative1Call__Outputs {
  _call: SweepNative1Call;

  constructor(call: SweepNative1Call) {
    this._call = call;
  }
}

export class SweepTokenCall extends ethereum.Call {
  get inputs(): SweepTokenCall__Inputs {
    return new SweepTokenCall__Inputs(this);
  }

  get outputs(): SweepTokenCall__Outputs {
    return new SweepTokenCall__Outputs(this);
  }
}

export class SweepTokenCall__Inputs {
  _call: SweepTokenCall;

  constructor(call: SweepTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SweepTokenCall__Outputs {
  _call: SweepTokenCall;

  constructor(call: SweepTokenCall) {
    this._call = call;
  }
}

export class SweepToken1Call extends ethereum.Call {
  get inputs(): SweepToken1Call__Inputs {
    return new SweepToken1Call__Inputs(this);
  }

  get outputs(): SweepToken1Call__Outputs {
    return new SweepToken1Call__Outputs(this);
  }
}

export class SweepToken1Call__Inputs {
  _call: SweepToken1Call;

  constructor(call: SweepToken1Call) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SweepToken1Call__Outputs {
  _call: SweepToken1Call;

  constructor(call: SweepToken1Call) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class XReceiveCall extends ethereum.Call {
  get inputs(): XReceiveCall__Inputs {
    return new XReceiveCall__Inputs(this);
  }

  get outputs(): XReceiveCall__Outputs {
    return new XReceiveCall__Outputs(this);
  }
}

export class XReceiveCall__Inputs {
  _call: XReceiveCall;

  constructor(call: XReceiveCall) {
    this._call = call;
  }

  get _transferId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _asset(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _originSender(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _origin(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _callData(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class XReceiveCall__Outputs {
  _call: XReceiveCall;

  constructor(call: XReceiveCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}
