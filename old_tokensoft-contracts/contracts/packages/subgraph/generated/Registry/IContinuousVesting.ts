// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class SetContinuousVesting extends ethereum.Event {
  get params(): SetContinuousVesting__Params {
    return new SetContinuousVesting__Params(this);
  }
}

export class SetContinuousVesting__Params {
  _event: SetContinuousVesting;

  constructor(event: SetContinuousVesting) {
    this._event = event;
  }

  get start(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get cliff(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get end(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class IContinuousVesting__getVestingConfigResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }

  getValue2(): BigInt {
    return this.value2;
  }
}

export class IContinuousVesting extends ethereum.SmartContract {
  static bind(address: Address): IContinuousVesting {
    return new IContinuousVesting("IContinuousVesting", address);
  }

  getVestingConfig(): IContinuousVesting__getVestingConfigResult {
    let result = super.call(
      "getVestingConfig",
      "getVestingConfig():(uint256,uint256,uint256)",
      []
    );

    return new IContinuousVesting__getVestingConfigResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getVestingConfig(): ethereum.CallResult<
    IContinuousVesting__getVestingConfigResult
  > {
    let result = super.tryCall(
      "getVestingConfig",
      "getVestingConfig():(uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new IContinuousVesting__getVestingConfigResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }
}

export class SetVestingConfigCall extends ethereum.Call {
  get inputs(): SetVestingConfigCall__Inputs {
    return new SetVestingConfigCall__Inputs(this);
  }

  get outputs(): SetVestingConfigCall__Outputs {
    return new SetVestingConfigCall__Outputs(this);
  }
}

export class SetVestingConfigCall__Inputs {
  _call: SetVestingConfigCall;

  constructor(call: SetVestingConfigCall) {
    this._call = call;
  }

  get _start(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _cliff(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _end(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetVestingConfigCall__Outputs {
  _call: SetVestingConfigCall;

  constructor(call: SetVestingConfigCall) {
    this._call = call;
  }
}
