// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class SaleImplementation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SaleImplementation entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SaleImplementation must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SaleImplementation", id.toString(), this);
    }
  }

  static load(id: string): SaleImplementation | null {
    return changetype<SaleImplementation | null>(
      store.get("SaleImplementation", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get feeRecipient(): string | null {
    let value = this.get("feeRecipient");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set feeRecipient(value: string | null) {
    if (!value) {
      this.unset("feeRecipient");
    } else {
      this.set("feeRecipient", Value.fromString(<string>value));
    }
  }

  get feeBips(): BigInt {
    let value = this.get("feeBips");
    return value!.toBigInt();
  }

  set feeBips(value: BigInt) {
    this.set("feeBips", Value.fromBigInt(value));
  }

  get saleCount(): BigInt {
    let value = this.get("saleCount");
    return value!.toBigInt();
  }

  set saleCount(value: BigInt) {
    this.set("saleCount", Value.fromBigInt(value));
  }

  get purchaseCount(): BigInt {
    let value = this.get("purchaseCount");
    return value!.toBigInt();
  }

  set purchaseCount(value: BigInt) {
    this.set("purchaseCount", Value.fromBigInt(value));
  }

  get sales(): Array<string> | null {
    let value = this.get("sales");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  get paymentMethods(): Array<string> | null {
    let value = this.get("paymentMethods");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set paymentMethods(value: Array<string> | null) {
    if (!value) {
      this.unset("paymentMethods");
    } else {
      this.set("paymentMethods", Value.fromStringArray(<Array<string>>value));
    }
  }

  get version(): string {
    let value = this.get("version");
    return value!.toString();
  }

  set version(value: string) {
    this.set("version", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class Sale extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Sale entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Sale must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Sale", id.toString(), this);
    }
  }

  static load(id: string): Sale | null {
    return changetype<Sale | null>(store.get("Sale", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get registeredAddress(): string | null {
    let value = this.get("registeredAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set registeredAddress(value: string | null) {
    if (!value) {
      this.unset("registeredAddress");
    } else {
      this.set("registeredAddress", Value.fromString(<string>value));
    }
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get implementation(): string {
    let value = this.get("implementation");
    return value!.toString();
  }

  set implementation(value: string) {
    this.set("implementation", Value.fromString(value));
  }

  get idBytes(): Bytes {
    let value = this.get("idBytes");
    return value!.toBytes();
  }

  set idBytes(value: Bytes) {
    this.set("idBytes", Value.fromBytes(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get distributor(): string | null {
    let value = this.get("distributor");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set distributor(value: string | null) {
    if (!value) {
      this.unset("distributor");
    } else {
      this.set("distributor", Value.fromString(<string>value));
    }
  }

  get recipient(): string {
    let value = this.get("recipient");
    return value!.toString();
  }

  set recipient(value: string) {
    this.set("recipient", Value.fromString(value));
  }

  get merkleRoot(): Bytes {
    let value = this.get("merkleRoot");
    return value!.toBytes();
  }

  set merkleRoot(value: Bytes) {
    this.set("merkleRoot", Value.fromBytes(value));
  }

  get saleMaximum(): BigInt {
    let value = this.get("saleMaximum");
    return value!.toBigInt();
  }

  set saleMaximum(value: BigInt) {
    this.set("saleMaximum", Value.fromBigInt(value));
  }

  get userMaximum(): BigInt {
    let value = this.get("userMaximum");
    return value!.toBigInt();
  }

  set userMaximum(value: BigInt) {
    this.set("userMaximum", Value.fromBigInt(value));
  }

  get purchaseMinimum(): BigInt {
    let value = this.get("purchaseMinimum");
    return value!.toBigInt();
  }

  set purchaseMinimum(value: BigInt) {
    this.set("purchaseMinimum", Value.fromBigInt(value));
  }

  get startTime(): BigInt {
    let value = this.get("startTime");
    return value!.toBigInt();
  }

  set startTime(value: BigInt) {
    this.set("startTime", Value.fromBigInt(value));
  }

  get endTime(): BigInt {
    let value = this.get("endTime");
    return value!.toBigInt();
  }

  set endTime(value: BigInt) {
    this.set("endTime", Value.fromBigInt(value));
  }

  get purchases(): Array<string> | null {
    let value = this.get("purchases");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  get maxQueueTime(): BigInt {
    let value = this.get("maxQueueTime");
    return value!.toBigInt();
  }

  set maxQueueTime(value: BigInt) {
    this.set("maxQueueTime", Value.fromBigInt(value));
  }

  get uris(): Array<string> {
    let value = this.get("uris");
    return value!.toStringArray();
  }

  set uris(value: Array<string>) {
    this.set("uris", Value.fromStringArray(value));
  }

  get baseCurrency(): string {
    let value = this.get("baseCurrency");
    return value!.toString();
  }

  set baseCurrency(value: string) {
    this.set("baseCurrency", Value.fromString(value));
  }

  get paymentMethods(): Array<string> {
    let value = this.get("paymentMethods");
    return value!.toStringArray();
  }

  set paymentMethods(value: Array<string>) {
    this.set("paymentMethods", Value.fromStringArray(value));
  }

  get purchaseCount(): BigInt {
    let value = this.get("purchaseCount");
    return value!.toBigInt();
  }

  set purchaseCount(value: BigInt) {
    this.set("purchaseCount", Value.fromBigInt(value));
  }

  get purchaseTotal(): BigInt {
    let value = this.get("purchaseTotal");
    return value!.toBigInt();
  }

  set purchaseTotal(value: BigInt) {
    this.set("purchaseTotal", Value.fromBigInt(value));
  }
}

export class PaymentMethod extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PaymentMethod entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PaymentMethod must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PaymentMethod", id.toString(), this);
    }
  }

  static load(id: string): PaymentMethod | null {
    return changetype<PaymentMethod | null>(store.get("PaymentMethod", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): Bytes | null {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set token(value: Bytes | null) {
    if (!value) {
      this.unset("token");
    } else {
      this.set("token", Value.fromBytes(<Bytes>value));
    }
  }

  get oracle(): Bytes | null {
    let value = this.get("oracle");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set oracle(value: Bytes | null) {
    if (!value) {
      this.unset("oracle");
    } else {
      this.set("oracle", Value.fromBytes(<Bytes>value));
    }
  }

  get native(): boolean {
    let value = this.get("native");
    return value!.toBoolean();
  }

  set native(value: boolean) {
    this.set("native", Value.fromBoolean(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value!.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get purchaseTotal(): BigInt {
    let value = this.get("purchaseTotal");
    return value!.toBigInt();
  }

  set purchaseTotal(value: BigInt) {
    this.set("purchaseTotal", Value.fromBigInt(value));
  }

  get purchaseCount(): BigInt {
    let value = this.get("purchaseCount");
    return value!.toBigInt();
  }

  set purchaseCount(value: BigInt) {
    this.set("purchaseCount", Value.fromBigInt(value));
  }

  get symbol(): string | null {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set symbol(value: string | null) {
    if (!value) {
      this.unset("symbol");
    } else {
      this.set("symbol", Value.fromString(<string>value));
    }
  }
}

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Account must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Account", id.toString(), this);
    }
  }

  static load(id: string): Account | null {
    return changetype<Account | null>(store.get("Account", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get purchases(): Array<string> {
    let value = this.get("purchases");
    return value!.toStringArray();
  }

  get ownerSales(): Array<string> | null {
    let value = this.get("ownerSales");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  get ownerRegistries(): Array<string> | null {
    let value = this.get("ownerRegistries");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  get ownerAdvancedDistributors(): Array<string> | null {
    let value = this.get("ownerAdvancedDistributors");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  get recipientSales(): Array<string> | null {
    let value = this.get("recipientSales");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  get feeRecipientSaleImplementations(): Array<string> | null {
    let value = this.get("feeRecipientSaleImplementations");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  get distributionRecords(): Array<string> | null {
    let value = this.get("distributionRecords");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class Purchase extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Purchase entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Purchase must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Purchase", id.toString(), this);
    }
  }

  static load(id: string): Purchase | null {
    return changetype<Purchase | null>(store.get("Purchase", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sale(): string {
    let value = this.get("sale");
    return value!.toString();
  }

  set sale(value: string) {
    this.set("sale", Value.fromString(value));
  }

  get buyer(): string {
    let value = this.get("buyer");
    return value!.toString();
  }

  set buyer(value: string) {
    this.set("buyer", Value.fromString(value));
  }

  get baseCurrencyValue(): BigInt {
    let value = this.get("baseCurrencyValue");
    return value!.toBigInt();
  }

  set baseCurrencyValue(value: BigInt) {
    this.set("baseCurrencyValue", Value.fromBigInt(value));
  }

  get paymentMethod(): string {
    let value = this.get("paymentMethod");
    return value!.toString();
  }

  set paymentMethod(value: string) {
    this.set("paymentMethod", Value.fromString(value));
  }

  get spent(): BigInt {
    let value = this.get("spent");
    return value!.toBigInt();
  }

  set spent(value: BigInt) {
    this.set("spent", Value.fromBigInt(value));
  }

  get fee(): BigInt {
    let value = this.get("fee");
    return value!.toBigInt();
  }

  set fee(value: BigInt) {
    this.set("fee", Value.fromBigInt(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    return value!.toBigInt();
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value!.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get uri(): string {
    let value = this.get("uri");
    return value!.toString();
  }

  set uri(value: string) {
    this.set("uri", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class Distributor extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Distributor entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Distributor must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Distributor", id.toString(), this);
    }
  }

  static load(id: string): Distributor | null {
    return changetype<Distributor | null>(store.get("Distributor", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get registeredAddress(): string | null {
    let value = this.get("registeredAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set registeredAddress(value: string | null) {
    if (!value) {
      this.unset("registeredAddress");
    } else {
      this.set("registeredAddress", Value.fromString(<string>value));
    }
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get sale(): string | null {
    let value = this.get("sale");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get version(): BigInt {
    let value = this.get("version");
    return value!.toBigInt();
  }

  set version(value: BigInt) {
    this.set("version", Value.fromBigInt(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value!.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get tokenSymbol(): string {
    let value = this.get("tokenSymbol");
    return value!.toString();
  }

  set tokenSymbol(value: string) {
    this.set("tokenSymbol", Value.fromString(value));
  }

  get tokenDecimals(): BigInt {
    let value = this.get("tokenDecimals");
    return value!.toBigInt();
  }

  set tokenDecimals(value: BigInt) {
    this.set("tokenDecimals", Value.fromBigInt(value));
  }

  get total(): BigInt {
    let value = this.get("total");
    return value!.toBigInt();
  }

  set total(value: BigInt) {
    this.set("total", Value.fromBigInt(value));
  }

  get claimed(): BigInt {
    let value = this.get("claimed");
    return value!.toBigInt();
  }

  set claimed(value: BigInt) {
    this.set("claimed", Value.fromBigInt(value));
  }

  get remaining(): BigInt {
    let value = this.get("remaining");
    return value!.toBigInt();
  }

  set remaining(value: BigInt) {
    this.set("remaining", Value.fromBigInt(value));
  }

  get distributionRecords(): Array<string> {
    let value = this.get("distributionRecords");
    return value!.toStringArray();
  }

  get uris(): Array<string> {
    let value = this.get("uris");
    return value!.toStringArray();
  }

  set uris(value: Array<string>) {
    this.set("uris", Value.fromStringArray(value));
  }

  get fractionDenominator(): BigInt {
    let value = this.get("fractionDenominator");
    return value!.toBigInt();
  }

  set fractionDenominator(value: BigInt) {
    this.set("fractionDenominator", Value.fromBigInt(value));
  }

  get advanced(): string | null {
    let value = this.get("advanced");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  get trancheVesting(): string | null {
    let value = this.get("trancheVesting");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  get tierVesting(): Array<string> | null {
    let value = this.get("tierVesting");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  get continuousVesting(): string | null {
    let value = this.get("continuousVesting");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  get merkleSet(): string | null {
    let value = this.get("merkleSet");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }
}

export class AdvancedDistributor extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AdvancedDistributor entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AdvancedDistributor must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AdvancedDistributor", id.toString(), this);
    }
  }

  static load(id: string): AdvancedDistributor | null {
    return changetype<AdvancedDistributor | null>(
      store.get("AdvancedDistributor", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get distributor(): string {
    let value = this.get("distributor");
    return value!.toString();
  }

  set distributor(value: string) {
    this.set("distributor", Value.fromString(value));
  }

  get owner(): string | null {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set owner(value: string | null) {
    if (!value) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromString(<string>value));
    }
  }

  get voteFactor(): BigInt | null {
    let value = this.get("voteFactor");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set voteFactor(value: BigInt | null) {
    if (!value) {
      this.unset("voteFactor");
    } else {
      this.set("voteFactor", Value.fromBigInt(<BigInt>value));
    }
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class TrancheVesting extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TrancheVesting entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TrancheVesting must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TrancheVesting", id.toString(), this);
    }
  }

  static load(id: string): TrancheVesting | null {
    return changetype<TrancheVesting | null>(store.get("TrancheVesting", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get distributor(): string {
    let value = this.get("distributor");
    return value!.toString();
  }

  set distributor(value: string) {
    this.set("distributor", Value.fromString(value));
  }

  get tranches(): Array<string> {
    let value = this.get("tranches");
    return value!.toStringArray();
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class Tranche extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Tranche entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Tranche must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Tranche", id.toString(), this);
    }
  }

  static load(id: string): Tranche | null {
    return changetype<Tranche | null>(store.get("Tranche", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get trancheVesting(): string {
    let value = this.get("trancheVesting");
    return value!.toString();
  }

  set trancheVesting(value: string) {
    this.set("trancheVesting", Value.fromString(value));
  }

  get index(): BigInt {
    let value = this.get("index");
    return value!.toBigInt();
  }

  set index(value: BigInt) {
    this.set("index", Value.fromBigInt(value));
  }

  get time(): BigInt {
    let value = this.get("time");
    return value!.toBigInt();
  }

  set time(value: BigInt) {
    this.set("time", Value.fromBigInt(value));
  }

  get vestedFraction(): BigInt {
    let value = this.get("vestedFraction");
    return value!.toBigInt();
  }

  set vestedFraction(value: BigInt) {
    this.set("vestedFraction", Value.fromBigInt(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class PriceTier extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PriceTier entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PriceTier must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PriceTier", id.toString(), this);
    }
  }

  static load(id: string): PriceTier | null {
    return changetype<PriceTier | null>(store.get("PriceTier", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get distributor(): string {
    let value = this.get("distributor");
    return value!.toString();
  }

  set distributor(value: string) {
    this.set("distributor", Value.fromString(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    return value!.toBigInt();
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get vestedFraction(): BigInt {
    let value = this.get("vestedFraction");
    return value!.toBigInt();
  }

  set vestedFraction(value: BigInt) {
    this.set("vestedFraction", Value.fromBigInt(value));
  }

  get oracle(): string {
    let value = this.get("oracle");
    return value!.toString();
  }

  set oracle(value: string) {
    this.set("oracle", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class ContinuousVesting extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ContinuousVesting entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ContinuousVesting must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ContinuousVesting", id.toString(), this);
    }
  }

  static load(id: string): ContinuousVesting | null {
    return changetype<ContinuousVesting | null>(
      store.get("ContinuousVesting", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get distributor(): string {
    let value = this.get("distributor");
    return value!.toString();
  }

  set distributor(value: string) {
    this.set("distributor", Value.fromString(value));
  }

  get start(): BigInt {
    let value = this.get("start");
    return value!.toBigInt();
  }

  set start(value: BigInt) {
    this.set("start", Value.fromBigInt(value));
  }

  get cliff(): BigInt {
    let value = this.get("cliff");
    return value!.toBigInt();
  }

  set cliff(value: BigInt) {
    this.set("cliff", Value.fromBigInt(value));
  }

  get end(): BigInt {
    let value = this.get("end");
    return value!.toBigInt();
  }

  set end(value: BigInt) {
    this.set("end", Value.fromBigInt(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class MerkleSet extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MerkleSet entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MerkleSet must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MerkleSet", id.toString(), this);
    }
  }

  static load(id: string): MerkleSet | null {
    return changetype<MerkleSet | null>(store.get("MerkleSet", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get distributor(): string {
    let value = this.get("distributor");
    return value!.toString();
  }

  set distributor(value: string) {
    this.set("distributor", Value.fromString(value));
  }

  get root(): string {
    let value = this.get("root");
    return value!.toString();
  }

  set root(value: string) {
    this.set("root", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class DistributionRecord extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DistributionRecord entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DistributionRecord must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DistributionRecord", id.toString(), this);
    }
  }

  static load(id: string): DistributionRecord | null {
    return changetype<DistributionRecord | null>(
      store.get("DistributionRecord", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get distributor(): string {
    let value = this.get("distributor");
    return value!.toString();
  }

  set distributor(value: string) {
    this.set("distributor", Value.fromString(value));
  }

  get beneficiary(): string {
    let value = this.get("beneficiary");
    return value!.toString();
  }

  set beneficiary(value: string) {
    this.set("beneficiary", Value.fromString(value));
  }

  get claims(): Array<string> {
    let value = this.get("claims");
    return value!.toStringArray();
  }

  get adjustments(): Array<string> {
    let value = this.get("adjustments");
    return value!.toStringArray();
  }

  get total(): BigInt {
    let value = this.get("total");
    return value!.toBigInt();
  }

  set total(value: BigInt) {
    this.set("total", Value.fromBigInt(value));
  }

  get claimed(): BigInt {
    let value = this.get("claimed");
    return value!.toBigInt();
  }

  set claimed(value: BigInt) {
    this.set("claimed", Value.fromBigInt(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class Claim extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Claim entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Claim must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Claim", id.toString(), this);
    }
  }

  static load(id: string): Claim | null {
    return changetype<Claim | null>(store.get("Claim", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get distributionRecord(): string {
    let value = this.get("distributionRecord");
    return value!.toString();
  }

  set distributionRecord(value: string) {
    this.set("distributionRecord", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value!.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get uri(): string {
    let value = this.get("uri");
    return value!.toString();
  }

  set uri(value: string) {
    this.set("uri", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get recipient(): string | null {
    let value = this.get("recipient");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set recipient(value: string | null) {
    if (!value) {
      this.unset("recipient");
    } else {
      this.set("recipient", Value.fromString(<string>value));
    }
  }

  get recipientChain(): BigInt | null {
    let value = this.get("recipientChain");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set recipientChain(value: BigInt | null) {
    if (!value) {
      this.unset("recipientChain");
    } else {
      this.set("recipientChain", Value.fromBigInt(<BigInt>value));
    }
  }

  get transferId(): Bytes | null {
    let value = this.get("transferId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set transferId(value: Bytes | null) {
    if (!value) {
      this.unset("transferId");
    } else {
      this.set("transferId", Value.fromBytes(<Bytes>value));
    }
  }
}

export class Adjustment extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Adjustment entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Adjustment must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Adjustment", id.toString(), this);
    }
  }

  static load(id: string): Adjustment | null {
    return changetype<Adjustment | null>(store.get("Adjustment", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get distributionRecord(): string {
    let value = this.get("distributionRecord");
    return value!.toString();
  }

  set distributionRecord(value: string) {
    this.set("distributionRecord", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    return value!.toString();
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get uri(): string {
    let value = this.get("uri");
    return value!.toString();
  }

  set uri(value: string) {
    this.set("uri", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class Registry extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Registry entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Registry must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Registry", id.toString(), this);
    }
  }

  static load(id: string): Registry | null {
    return changetype<Registry | null>(store.get("Registry", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get addresses(): Array<string> {
    let value = this.get("addresses");
    return value!.toStringArray();
  }

  get admins(): Array<string> {
    let value = this.get("admins");
    return value!.toStringArray();
  }

  set admins(value: Array<string>) {
    this.set("admins", Value.fromStringArray(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class RegisteredAddress extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RegisteredAddress entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RegisteredAddress must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RegisteredAddress", id.toString(), this);
    }
  }

  static load(id: string): RegisteredAddress | null {
    return changetype<RegisteredAddress | null>(
      store.get("RegisteredAddress", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get registry(): string {
    let value = this.get("registry");
    return value!.toString();
  }

  set registry(value: string) {
    this.set("registry", Value.fromString(value));
  }

  get interfaceIds(): Array<string> {
    let value = this.get("interfaceIds");
    return value!.toStringArray();
  }

  set interfaceIds(value: Array<string>) {
    this.set("interfaceIds", Value.fromStringArray(value));
  }

  get interfaceNames(): Array<string> {
    let value = this.get("interfaceNames");
    return value!.toStringArray();
  }

  set interfaceNames(value: Array<string>) {
    this.set("interfaceNames", Value.fromStringArray(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class Trader extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Trader entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Trader must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Trader", id.toString(), this);
    }
  }

  static load(id: string): Trader | null {
    return changetype<Trader | null>(store.get("Trader", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get fee(): BigInt {
    let value = this.get("fee");
    return value!.toBigInt();
  }

  set fee(value: BigInt) {
    this.set("fee", Value.fromBigInt(value));
  }

  get feeRecipient(): string {
    let value = this.get("feeRecipient");
    return value!.toString();
  }

  set feeRecipient(value: string) {
    this.set("feeRecipient", Value.fromString(value));
  }

  get router(): string {
    let value = this.get("router");
    return value!.toString();
  }

  set router(value: string) {
    this.set("router", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get recipient(): string {
    let value = this.get("recipient");
    return value!.toString();
  }

  set recipient(value: string) {
    this.set("recipient", Value.fromString(value));
  }

  get trades(): Array<string> {
    let value = this.get("trades");
    return value!.toStringArray();
  }

  get crossChainTrades(): Array<string> {
    let value = this.get("crossChainTrades");
    return value!.toStringArray();
  }
}

export class Trade extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Trade entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Trade must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Trade", id.toString(), this);
    }
  }

  static load(id: string): Trade | null {
    return changetype<Trade | null>(store.get("Trade", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get traderContract(): string {
    let value = this.get("traderContract");
    return value!.toString();
  }

  set traderContract(value: string) {
    this.set("traderContract", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get externalAccount(): string {
    let value = this.get("externalAccount");
    return value!.toString();
  }

  set externalAccount(value: string) {
    this.set("externalAccount", Value.fromString(value));
  }

  get trader(): string {
    let value = this.get("trader");
    return value!.toString();
  }

  set trader(value: string) {
    this.set("trader", Value.fromString(value));
  }

  get effectiveTrader(): string {
    let value = this.get("effectiveTrader");
    return value!.toString();
  }

  set effectiveTrader(value: string) {
    this.set("effectiveTrader", Value.fromString(value));
  }

  get baseToken(): string {
    let value = this.get("baseToken");
    return value!.toString();
  }

  set baseToken(value: string) {
    this.set("baseToken", Value.fromString(value));
  }

  get quoteToken(): string {
    let value = this.get("quoteToken");
    return value!.toString();
  }

  set quoteToken(value: string) {
    this.set("quoteToken", Value.fromString(value));
  }

  get effectiveBaseTokenAmount(): BigInt {
    let value = this.get("effectiveBaseTokenAmount");
    return value!.toBigInt();
  }

  set effectiveBaseTokenAmount(value: BigInt) {
    this.set("effectiveBaseTokenAmount", Value.fromBigInt(value));
  }

  get maxBaseTokenAmount(): BigInt {
    let value = this.get("maxBaseTokenAmount");
    return value!.toBigInt();
  }

  set maxBaseTokenAmount(value: BigInt) {
    this.set("maxBaseTokenAmount", Value.fromBigInt(value));
  }

  get maxQuoteTokenAmount(): BigInt {
    let value = this.get("maxQuoteTokenAmount");
    return value!.toBigInt();
  }

  set maxQuoteTokenAmount(value: BigInt) {
    this.set("maxQuoteTokenAmount", Value.fromBigInt(value));
  }

  get quoteExpiry(): BigInt {
    let value = this.get("quoteExpiry");
    return value!.toBigInt();
  }

  set quoteExpiry(value: BigInt) {
    this.set("quoteExpiry", Value.fromBigInt(value));
  }

  get nonce(): BigInt {
    let value = this.get("nonce");
    return value!.toBigInt();
  }

  set nonce(value: BigInt) {
    this.set("nonce", Value.fromBigInt(value));
  }

  get txid(): Bytes {
    let value = this.get("txid");
    return value!.toBytes();
  }

  set txid(value: Bytes) {
    this.set("txid", Value.fromBytes(value));
  }

  get signature(): Bytes {
    let value = this.get("signature");
    return value!.toBytes();
  }

  set signature(value: Bytes) {
    this.set("signature", Value.fromBytes(value));
  }
}

export class CrossChainTrade extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CrossChainTrade entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CrossChainTrade must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CrossChainTrade", id.toString(), this);
    }
  }

  static load(id: string): CrossChainTrade | null {
    return changetype<CrossChainTrade | null>(store.get("CrossChainTrade", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get traderContract(): string {
    let value = this.get("traderContract");
    return value!.toString();
  }

  set traderContract(value: string) {
    this.set("traderContract", Value.fromString(value));
  }

  get protocol(): BigInt {
    let value = this.get("protocol");
    return value!.toBigInt();
  }

  set protocol(value: BigInt) {
    this.set("protocol", Value.fromBigInt(value));
  }

  get srcChainId(): BigInt {
    let value = this.get("srcChainId");
    return value!.toBigInt();
  }

  set srcChainId(value: BigInt) {
    this.set("srcChainId", Value.fromBigInt(value));
  }

  get dstChainId(): BigInt {
    let value = this.get("dstChainId");
    return value!.toBigInt();
  }

  set dstChainId(value: BigInt) {
    this.set("dstChainId", Value.fromBigInt(value));
  }

  get srcPool(): string {
    let value = this.get("srcPool");
    return value!.toString();
  }

  set srcPool(value: string) {
    this.set("srcPool", Value.fromString(value));
  }

  get dstPool(): string {
    let value = this.get("dstPool");
    return value!.toString();
  }

  set dstPool(value: string) {
    this.set("dstPool", Value.fromString(value));
  }

  get srcExternalAccount(): string {
    let value = this.get("srcExternalAccount");
    return value!.toString();
  }

  set srcExternalAccount(value: string) {
    this.set("srcExternalAccount", Value.fromString(value));
  }

  get dstExternalAccount(): string {
    let value = this.get("dstExternalAccount");
    return value!.toString();
  }

  set dstExternalAccount(value: string) {
    this.set("dstExternalAccount", Value.fromString(value));
  }

  get trader(): string | null {
    let value = this.get("trader");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set trader(value: string | null) {
    if (!value) {
      this.unset("trader");
    } else {
      this.set("trader", Value.fromString(<string>value));
    }
  }

  get baseToken(): string {
    let value = this.get("baseToken");
    return value!.toString();
  }

  set baseToken(value: string) {
    this.set("baseToken", Value.fromString(value));
  }

  get quoteToken(): string {
    let value = this.get("quoteToken");
    return value!.toString();
  }

  set quoteToken(value: string) {
    this.set("quoteToken", Value.fromString(value));
  }

  get baseTokenAmount(): BigInt {
    let value = this.get("baseTokenAmount");
    return value!.toBigInt();
  }

  set baseTokenAmount(value: BigInt) {
    this.set("baseTokenAmount", Value.fromBigInt(value));
  }

  get quoteTokenAmount(): BigInt {
    let value = this.get("quoteTokenAmount");
    return value!.toBigInt();
  }

  set quoteTokenAmount(value: BigInt) {
    this.set("quoteTokenAmount", Value.fromBigInt(value));
  }

  get quoteExpiry(): BigInt {
    let value = this.get("quoteExpiry");
    return value!.toBigInt();
  }

  set quoteExpiry(value: BigInt) {
    this.set("quoteExpiry", Value.fromBigInt(value));
  }

  get nonce(): BigInt {
    let value = this.get("nonce");
    return value!.toBigInt();
  }

  set nonce(value: BigInt) {
    this.set("nonce", Value.fromBigInt(value));
  }

  get txid(): Bytes {
    let value = this.get("txid");
    return value!.toBytes();
  }

  set txid(value: Bytes) {
    this.set("txid", Value.fromBytes(value));
  }

  get signature(): Bytes {
    let value = this.get("signature");
    return value!.toBytes();
  }

  set signature(value: Bytes) {
    this.set("signature", Value.fromBytes(value));
  }
}
