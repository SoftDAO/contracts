// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Buy extends ethereum.Event {
  get params(): Buy__Params {
    return new Buy__Params(this);
  }
}

export class Buy__Params {
  _event: Buy;

  constructor(event: Buy) {
    this._event = event;
  }

  get buyer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get baseCurrencyValue(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokenValue(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get tokenFee(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class ImplementationConstructor extends ethereum.Event {
  get params(): ImplementationConstructor__Params {
    return new ImplementationConstructor__Params(this);
  }
}

export class ImplementationConstructor__Params {
  _event: ImplementationConstructor;

  constructor(event: ImplementationConstructor) {
    this._event = event;
  }

  get feeRecipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get feeBips(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Initialize extends ethereum.Event {
  get params(): Initialize__Params {
    return new Initialize__Params(this);
  }
}

export class Initialize__Params {
  _event: Initialize;

  constructor(event: Initialize) {
    this._event = event;
  }

  get config(): InitializeConfigStruct {
    return changetype<InitializeConfigStruct>(
      this._event.parameters[0].value.toTuple()
    );
  }

  get baseCurrency(): string {
    return this._event.parameters[1].value.toString();
  }

  get nativeOracle(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get nativePaymentsEnabled(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }
}

export class InitializeConfigStruct extends ethereum.Tuple {
  get recipient(): Address {
    return this[0].toAddress();
  }

  get merkleRoot(): Bytes {
    return this[1].toBytes();
  }

  get saleMaximum(): BigInt {
    return this[2].toBigInt();
  }

  get userMaximum(): BigInt {
    return this[3].toBigInt();
  }

  get purchaseMinimum(): BigInt {
    return this[4].toBigInt();
  }

  get startTime(): BigInt {
    return this[5].toBigInt();
  }

  get endTime(): BigInt {
    return this[6].toBigInt();
  }

  get maxQueueTime(): BigInt {
    return this[7].toBigInt();
  }

  get URI(): string {
    return this[8].toString();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RegisterDistributor extends ethereum.Event {
  get params(): RegisterDistributor__Params {
    return new RegisterDistributor__Params(this);
  }
}

export class RegisterDistributor__Params {
  _event: RegisterDistributor;

  constructor(event: RegisterDistributor) {
    this._event = event;
  }

  get distributor(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SetPaymentTokenInfo extends ethereum.Event {
  get params(): SetPaymentTokenInfo__Params {
    return new SetPaymentTokenInfo__Params(this);
  }
}

export class SetPaymentTokenInfo__Params {
  _event: SetPaymentTokenInfo;

  constructor(event: SetPaymentTokenInfo) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get paymentTokenInfo(): SetPaymentTokenInfoPaymentTokenInfoStruct {
    return changetype<SetPaymentTokenInfoPaymentTokenInfoStruct>(
      this._event.parameters[1].value.toTuple()
    );
  }
}

export class SetPaymentTokenInfoPaymentTokenInfoStruct extends ethereum.Tuple {
  get oracle(): Address {
    return this[0].toAddress();
  }

  get decimals(): i32 {
    return this[1].toI32();
  }
}

export class SweepNative extends ethereum.Event {
  get params(): SweepNative__Params {
    return new SweepNative__Params(this);
  }
}

export class SweepNative__Params {
  _event: SweepNative;

  constructor(event: SweepNative) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SweepToken extends ethereum.Event {
  get params(): SweepToken__Params {
    return new SweepToken__Params(this);
  }
}

export class SweepToken__Params {
  _event: SweepToken;

  constructor(event: SweepToken) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Update extends ethereum.Event {
  get params(): Update__Params {
    return new Update__Params(this);
  }
}

export class Update__Params {
  _event: Update;

  constructor(event: Update) {
    this._event = event;
  }

  get config(): UpdateConfigStruct {
    return changetype<UpdateConfigStruct>(
      this._event.parameters[0].value.toTuple()
    );
  }
}

export class UpdateConfigStruct extends ethereum.Tuple {
  get recipient(): Address {
    return this[0].toAddress();
  }

  get merkleRoot(): Bytes {
    return this[1].toBytes();
  }

  get saleMaximum(): BigInt {
    return this[2].toBigInt();
  }

  get userMaximum(): BigInt {
    return this[3].toBigInt();
  }

  get purchaseMinimum(): BigInt {
    return this[4].toBigInt();
  }

  get startTime(): BigInt {
    return this[5].toBigInt();
  }

  get endTime(): BigInt {
    return this[6].toBigInt();
  }

  get maxQueueTime(): BigInt {
    return this[7].toBigInt();
  }

  get URI(): string {
    return this[8].toString();
  }
}

export class FlatPriceSale__configResult {
  value0: Address;
  value1: Bytes;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: string;

  constructor(
    value0: Address,
    value1: Bytes,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: string
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytes(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromString(this.value8));
    return map;
  }

  getRecipient(): Address {
    return this.value0;
  }

  getMerkleRoot(): Bytes {
    return this.value1;
  }

  getSaleMaximum(): BigInt {
    return this.value2;
  }

  getUserMaximum(): BigInt {
    return this.value3;
  }

  getPurchaseMinimum(): BigInt {
    return this.value4;
  }

  getStartTime(): BigInt {
    return this.value5;
  }

  getEndTime(): BigInt {
    return this.value6;
  }

  getMaxQueueTime(): BigInt {
    return this.value7;
  }

  getURI(): string {
    return this.value8;
  }
}

export class FlatPriceSale__getPaymentTokenResultValue0Struct extends ethereum.Tuple {
  get oracle(): Address {
    return this[0].toAddress();
  }

  get decimals(): i32 {
    return this[1].toI32();
  }
}

export class FlatPriceSale__metricsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getPurchaseCount(): BigInt {
    return this.value0;
  }

  getBuyerCount(): BigInt {
    return this.value1;
  }

  getPurchaseTotal(): BigInt {
    return this.value2;
  }
}

export class FlatPriceSale__paymentTokensResult {
  value0: Address;
  value1: i32;

  constructor(value0: Address, value1: i32) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    return map;
  }

  getOracle(): Address {
    return this.value0;
  }

  getDecimals(): i32 {
    return this.value1;
  }
}

export class FlatPriceSale extends ethereum.SmartContract {
  static bind(address: Address): FlatPriceSale {
    return new FlatPriceSale("FlatPriceSale", address);
  }

  BASE_CURRENCY_DECIMALS(): BigInt {
    let result = super.call(
      "BASE_CURRENCY_DECIMALS",
      "BASE_CURRENCY_DECIMALS():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_BASE_CURRENCY_DECIMALS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "BASE_CURRENCY_DECIMALS",
      "BASE_CURRENCY_DECIMALS():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  VERSION(): string {
    let result = super.call("VERSION", "VERSION():(string)", []);

    return result[0].toString();
  }

  try_VERSION(): ethereum.CallResult<string> {
    let result = super.tryCall("VERSION", "VERSION():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  baseCurrency(): string {
    let result = super.call("baseCurrency", "baseCurrency():(string)", []);

    return result[0].toString();
  }

  try_baseCurrency(): ethereum.CallResult<string> {
    let result = super.tryCall("baseCurrency", "baseCurrency():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  buyerTotal(user: Address): BigInt {
    let result = super.call("buyerTotal", "buyerTotal(address):(uint256)", [
      ethereum.Value.fromAddress(user)
    ]);

    return result[0].toBigInt();
  }

  try_buyerTotal(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("buyerTotal", "buyerTotal(address):(uint256)", [
      ethereum.Value.fromAddress(user)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  config(): FlatPriceSale__configResult {
    let result = super.call(
      "config",
      "config():(address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256,string)",
      []
    );

    return new FlatPriceSale__configResult(
      result[0].toAddress(),
      result[1].toBytes(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toString()
    );
  }

  try_config(): ethereum.CallResult<FlatPriceSale__configResult> {
    let result = super.tryCall(
      "config",
      "config():(address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256,string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new FlatPriceSale__configResult(
        value[0].toAddress(),
        value[1].toBytes(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toString()
      )
    );
  }

  generatePseudorandomValue(merkleRoot: Bytes): BigInt {
    let result = super.call(
      "generatePseudorandomValue",
      "generatePseudorandomValue(bytes32):(uint160)",
      [ethereum.Value.fromFixedBytes(merkleRoot)]
    );

    return result[0].toBigInt();
  }

  try_generatePseudorandomValue(
    merkleRoot: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "generatePseudorandomValue",
      "generatePseudorandomValue(bytes32):(uint160)",
      [ethereum.Value.fromFixedBytes(merkleRoot)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getFairQueueTime(buyer: Address): BigInt {
    let result = super.call(
      "getFairQueueTime",
      "getFairQueueTime(address):(uint256)",
      [ethereum.Value.fromAddress(buyer)]
    );

    return result[0].toBigInt();
  }

  try_getFairQueueTime(buyer: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getFairQueueTime",
      "getFairQueueTime(address):(uint256)",
      [ethereum.Value.fromAddress(buyer)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOraclePrice(oracle: Address): BigInt {
    let result = super.call(
      "getOraclePrice",
      "getOraclePrice(address):(uint256)",
      [ethereum.Value.fromAddress(oracle)]
    );

    return result[0].toBigInt();
  }

  try_getOraclePrice(oracle: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getOraclePrice",
      "getOraclePrice(address):(uint256)",
      [ethereum.Value.fromAddress(oracle)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPaymentToken(
    token: Address
  ): FlatPriceSale__getPaymentTokenResultValue0Struct {
    let result = super.call(
      "getPaymentToken",
      "getPaymentToken(address):((address,uint8))",
      [ethereum.Value.fromAddress(token)]
    );

    return changetype<FlatPriceSale__getPaymentTokenResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getPaymentToken(
    token: Address
  ): ethereum.CallResult<FlatPriceSale__getPaymentTokenResultValue0Struct> {
    let result = super.tryCall(
      "getPaymentToken",
      "getPaymentToken(address):((address,uint8))",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<FlatPriceSale__getPaymentTokenResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  isOpen(): boolean {
    let result = super.call("isOpen", "isOpen():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOpen(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOpen", "isOpen():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isOver(): boolean {
    let result = super.call("isOver", "isOver():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOver(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOver", "isOver():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isValidMerkleProof(
    root: Bytes,
    account: Address,
    data: Bytes,
    proof: Array<Bytes>
  ): boolean {
    let result = super.call(
      "isValidMerkleProof",
      "isValidMerkleProof(bytes32,address,bytes,bytes32[]):(bool)",
      [
        ethereum.Value.fromFixedBytes(root),
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromBytes(data),
        ethereum.Value.fromFixedBytesArray(proof)
      ]
    );

    return result[0].toBoolean();
  }

  try_isValidMerkleProof(
    root: Bytes,
    account: Address,
    data: Bytes,
    proof: Array<Bytes>
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isValidMerkleProof",
      "isValidMerkleProof(bytes32,address,bytes,bytes32[]):(bool)",
      [
        ethereum.Value.fromFixedBytes(root),
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromBytes(data),
        ethereum.Value.fromFixedBytesArray(proof)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  metrics(): FlatPriceSale__metricsResult {
    let result = super.call(
      "metrics",
      "metrics():(uint256,uint256,uint256)",
      []
    );

    return new FlatPriceSale__metricsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_metrics(): ethereum.CallResult<FlatPriceSale__metricsResult> {
    let result = super.tryCall(
      "metrics",
      "metrics():(uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new FlatPriceSale__metricsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  nativeTokenPriceOracle(): Address {
    let result = super.call(
      "nativeTokenPriceOracle",
      "nativeTokenPriceOracle():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_nativeTokenPriceOracle(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "nativeTokenPriceOracle",
      "nativeTokenPriceOracle():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paymentTokens(param0: Address): FlatPriceSale__paymentTokensResult {
    let result = super.call(
      "paymentTokens",
      "paymentTokens(address):(address,uint8)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new FlatPriceSale__paymentTokensResult(
      result[0].toAddress(),
      result[1].toI32()
    );
  }

  try_paymentTokens(
    param0: Address
  ): ethereum.CallResult<FlatPriceSale__paymentTokensResult> {
    let result = super.tryCall(
      "paymentTokens",
      "paymentTokens(address):(address,uint8)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new FlatPriceSale__paymentTokensResult(
        value[0].toAddress(),
        value[1].toI32()
      )
    );
  }

  payments(dest: Address): BigInt {
    let result = super.call("payments", "payments(address):(uint256)", [
      ethereum.Value.fromAddress(dest)
    ]);

    return result[0].toBigInt();
  }

  try_payments(dest: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("payments", "payments(address):(uint256)", [
      ethereum.Value.fromAddress(dest)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokensToBaseCurrency(
    tokenQuantity: BigInt,
    tokenDecimals: BigInt,
    oracle: Address
  ): BigInt {
    let result = super.call(
      "tokensToBaseCurrency",
      "tokensToBaseCurrency(uint256,uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenQuantity),
        ethereum.Value.fromUnsignedBigInt(tokenDecimals),
        ethereum.Value.fromAddress(oracle)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokensToBaseCurrency(
    tokenQuantity: BigInt,
    tokenDecimals: BigInt,
    oracle: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokensToBaseCurrency",
      "tokensToBaseCurrency(uint256,uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenQuantity),
        ethereum.Value.fromUnsignedBigInt(tokenDecimals),
        ethereum.Value.fromAddress(oracle)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  total(): BigInt {
    let result = super.call("total", "total():(uint256)", []);

    return result[0].toBigInt();
  }

  try_total(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("total", "total():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _feeBips(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _feeRecipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BuyWithNativeCall extends ethereum.Call {
  get inputs(): BuyWithNativeCall__Inputs {
    return new BuyWithNativeCall__Inputs(this);
  }

  get outputs(): BuyWithNativeCall__Outputs {
    return new BuyWithNativeCall__Outputs(this);
  }
}

export class BuyWithNativeCall__Inputs {
  _call: BuyWithNativeCall;

  constructor(call: BuyWithNativeCall) {
    this._call = call;
  }

  get data(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get proof(): Array<Bytes> {
    return this._call.inputValues[1].value.toBytesArray();
  }
}

export class BuyWithNativeCall__Outputs {
  _call: BuyWithNativeCall;

  constructor(call: BuyWithNativeCall) {
    this._call = call;
  }
}

export class BuyWithTokenCall extends ethereum.Call {
  get inputs(): BuyWithTokenCall__Inputs {
    return new BuyWithTokenCall__Inputs(this);
  }

  get outputs(): BuyWithTokenCall__Outputs {
    return new BuyWithTokenCall__Outputs(this);
  }
}

export class BuyWithTokenCall__Inputs {
  _call: BuyWithTokenCall;

  constructor(call: BuyWithTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get quantity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get proof(): Array<Bytes> {
    return this._call.inputValues[3].value.toBytesArray();
  }
}

export class BuyWithTokenCall__Outputs {
  _call: BuyWithTokenCall;

  constructor(call: BuyWithTokenCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _config(): InitializeCall_configStruct {
    return changetype<InitializeCall_configStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }

  get _baseCurrency(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _nativePaymentsEnabled(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }

  get _nativeTokenPriceOracle(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[5].value.toAddressArray();
  }

  get oracles(): Array<Address> {
    return this._call.inputValues[6].value.toAddressArray();
  }

  get decimals(): Array<i32> {
    return this._call.inputValues[7].value.toI32Array();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall_configStruct extends ethereum.Tuple {
  get recipient(): Address {
    return this[0].toAddress();
  }

  get merkleRoot(): Bytes {
    return this[1].toBytes();
  }

  get saleMaximum(): BigInt {
    return this[2].toBigInt();
  }

  get userMaximum(): BigInt {
    return this[3].toBigInt();
  }

  get purchaseMinimum(): BigInt {
    return this[4].toBigInt();
  }

  get startTime(): BigInt {
    return this[5].toBigInt();
  }

  get endTime(): BigInt {
    return this[6].toBigInt();
  }

  get maxQueueTime(): BigInt {
    return this[7].toBigInt();
  }

  get URI(): string {
    return this[8].toString();
  }
}

export class RegisterDistributorCall extends ethereum.Call {
  get inputs(): RegisterDistributorCall__Inputs {
    return new RegisterDistributorCall__Inputs(this);
  }

  get outputs(): RegisterDistributorCall__Outputs {
    return new RegisterDistributorCall__Outputs(this);
  }
}

export class RegisterDistributorCall__Inputs {
  _call: RegisterDistributorCall;

  constructor(call: RegisterDistributorCall) {
    this._call = call;
  }

  get _distributor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RegisterDistributorCall__Outputs {
  _call: RegisterDistributorCall;

  constructor(call: RegisterDistributorCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SweepNativeCall extends ethereum.Call {
  get inputs(): SweepNativeCall__Inputs {
    return new SweepNativeCall__Inputs(this);
  }

  get outputs(): SweepNativeCall__Outputs {
    return new SweepNativeCall__Outputs(this);
  }
}

export class SweepNativeCall__Inputs {
  _call: SweepNativeCall;

  constructor(call: SweepNativeCall) {
    this._call = call;
  }
}

export class SweepNativeCall__Outputs {
  _call: SweepNativeCall;

  constructor(call: SweepNativeCall) {
    this._call = call;
  }
}

export class SweepTokenCall extends ethereum.Call {
  get inputs(): SweepTokenCall__Inputs {
    return new SweepTokenCall__Inputs(this);
  }

  get outputs(): SweepTokenCall__Outputs {
    return new SweepTokenCall__Outputs(this);
  }
}

export class SweepTokenCall__Inputs {
  _call: SweepTokenCall;

  constructor(call: SweepTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SweepTokenCall__Outputs {
  _call: SweepTokenCall;

  constructor(call: SweepTokenCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateCall extends ethereum.Call {
  get inputs(): UpdateCall__Inputs {
    return new UpdateCall__Inputs(this);
  }

  get outputs(): UpdateCall__Outputs {
    return new UpdateCall__Outputs(this);
  }
}

export class UpdateCall__Inputs {
  _call: UpdateCall;

  constructor(call: UpdateCall) {
    this._call = call;
  }

  get _config(): UpdateCall_configStruct {
    return changetype<UpdateCall_configStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class UpdateCall__Outputs {
  _call: UpdateCall;

  constructor(call: UpdateCall) {
    this._call = call;
  }
}

export class UpdateCall_configStruct extends ethereum.Tuple {
  get recipient(): Address {
    return this[0].toAddress();
  }

  get merkleRoot(): Bytes {
    return this[1].toBytes();
  }

  get saleMaximum(): BigInt {
    return this[2].toBigInt();
  }

  get userMaximum(): BigInt {
    return this[3].toBigInt();
  }

  get purchaseMinimum(): BigInt {
    return this[4].toBigInt();
  }

  get startTime(): BigInt {
    return this[5].toBigInt();
  }

  get endTime(): BigInt {
    return this[6].toBigInt();
  }

  get maxQueueTime(): BigInt {
    return this[7].toBigInt();
  }

  get URI(): string {
    return this[8].toString();
  }
}

export class WithdrawPaymentsCall extends ethereum.Call {
  get inputs(): WithdrawPaymentsCall__Inputs {
    return new WithdrawPaymentsCall__Inputs(this);
  }

  get outputs(): WithdrawPaymentsCall__Outputs {
    return new WithdrawPaymentsCall__Outputs(this);
  }
}

export class WithdrawPaymentsCall__Inputs {
  _call: WithdrawPaymentsCall;

  constructor(call: WithdrawPaymentsCall) {
    this._call = call;
  }

  get payee(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawPaymentsCall__Outputs {
  _call: WithdrawPaymentsCall;

  constructor(call: WithdrawPaymentsCall) {
    this._call = call;
  }
}
