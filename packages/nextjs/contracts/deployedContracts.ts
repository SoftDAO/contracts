/**
 * This file is autogenerated by Scaffold-ETH.
 * You should not edit it manually or your changes might be overwritten.
 */
import { GenericContractsDeclaration } from "~~/utils/scaffold-eth/contract";

const deployedContracts = {
  31337: {
    FlatPriceSale: {
      address: "0x5FbDB2315678afecb367f032d93F642f64180aa3",
      abi: [
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_feeBips",
              type: "uint256",
            },
            {
              internalType: "address payable",
              name: "_feeRecipient",
              type: "address",
            },
          ],
          stateMutability: "nonpayable",
          type: "constructor",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "buyer",
              type: "address",
            },
            {
              indexed: true,
              internalType: "address",
              name: "token",
              type: "address",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "baseCurrencyValue",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "tokenValue",
              type: "uint256",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "tokenFee",
              type: "uint256",
            },
          ],
          name: "Buy",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address payable",
              name: "feeRecipient",
              type: "address",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "feeBips",
              type: "uint256",
            },
          ],
          name: "ImplementationConstructor",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              components: [
                {
                  internalType: "address payable",
                  name: "recipient",
                  type: "address",
                },
                {
                  internalType: "bytes32",
                  name: "merkleRoot",
                  type: "bytes32",
                },
                {
                  internalType: "uint256",
                  name: "saleMaximum",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "userMaximum",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "purchaseMinimum",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "startTime",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "endTime",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "maxQueueTime",
                  type: "uint256",
                },
                {
                  internalType: "string",
                  name: "URI",
                  type: "string",
                },
              ],
              indexed: false,
              internalType: "struct Config",
              name: "config",
              type: "tuple",
            },
            {
              indexed: false,
              internalType: "string",
              name: "baseCurrency",
              type: "string",
            },
            {
              indexed: false,
              internalType: "contract IOracleOrL2OracleWithSequencerCheck",
              name: "nativeOracle",
              type: "address",
            },
            {
              indexed: false,
              internalType: "bool",
              name: "nativePaymentsEnabled",
              type: "bool",
            },
          ],
          name: "Initialize",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "uint8",
              name: "version",
              type: "uint8",
            },
          ],
          name: "Initialized",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "previousOwner",
              type: "address",
            },
            {
              indexed: true,
              internalType: "address",
              name: "newOwner",
              type: "address",
            },
          ],
          name: "OwnershipTransferred",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "address",
              name: "distributor",
              type: "address",
            },
          ],
          name: "RegisterDistributor",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "contract IERC20Upgradeable",
              name: "token",
              type: "address",
            },
            {
              components: [
                {
                  internalType: "contract IOracleOrL2OracleWithSequencerCheck",
                  name: "oracle",
                  type: "address",
                },
                {
                  internalType: "uint8",
                  name: "decimals",
                  type: "uint8",
                },
              ],
              indexed: false,
              internalType: "struct PaymentTokenInfo",
              name: "paymentTokenInfo",
              type: "tuple",
            },
          ],
          name: "SetPaymentTokenInfo",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: false,
              internalType: "uint256",
              name: "amount",
              type: "uint256",
            },
          ],
          name: "SweepNative",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "token",
              type: "address",
            },
            {
              indexed: false,
              internalType: "uint256",
              name: "amount",
              type: "uint256",
            },
          ],
          name: "SweepToken",
          type: "event",
        },
        {
          anonymous: false,
          inputs: [
            {
              components: [
                {
                  internalType: "address payable",
                  name: "recipient",
                  type: "address",
                },
                {
                  internalType: "bytes32",
                  name: "merkleRoot",
                  type: "bytes32",
                },
                {
                  internalType: "uint256",
                  name: "saleMaximum",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "userMaximum",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "purchaseMinimum",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "startTime",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "endTime",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "maxQueueTime",
                  type: "uint256",
                },
                {
                  internalType: "string",
                  name: "URI",
                  type: "string",
                },
              ],
              indexed: false,
              internalType: "struct Config",
              name: "config",
              type: "tuple",
            },
          ],
          name: "Update",
          type: "event",
        },
        {
          inputs: [],
          name: "BASE_CURRENCY_DECIMALS",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "VERSION",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "baseCurrency",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "data",
              type: "bytes",
            },
            {
              internalType: "bytes32[]",
              name: "proof",
              type: "bytes32[]",
            },
          ],
          name: "buyWithNative",
          outputs: [],
          stateMutability: "payable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "contract IERC20Upgradeable",
              name: "token",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "quantity",
              type: "uint256",
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes",
            },
            {
              internalType: "bytes32[]",
              name: "proof",
              type: "bytes32[]",
            },
          ],
          name: "buyWithToken",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "user",
              type: "address",
            },
          ],
          name: "buyerTotal",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "config",
          outputs: [
            {
              internalType: "address payable",
              name: "recipient",
              type: "address",
            },
            {
              internalType: "bytes32",
              name: "merkleRoot",
              type: "bytes32",
            },
            {
              internalType: "uint256",
              name: "saleMaximum",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "userMaximum",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "purchaseMinimum",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "startTime",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "endTime",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "maxQueueTime",
              type: "uint256",
            },
            {
              internalType: "string",
              name: "URI",
              type: "string",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "merkleRoot",
              type: "bytes32",
            },
          ],
          name: "generatePseudorandomValue",
          outputs: [
            {
              internalType: "uint160",
              name: "",
              type: "uint160",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "buyer",
              type: "address",
            },
          ],
          name: "getFairQueueTime",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "contract IOracleOrL2OracleWithSequencerCheck",
              name: "oracle",
              type: "address",
            },
          ],
          name: "getOraclePrice",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "contract IERC20Upgradeable",
              name: "token",
              type: "address",
            },
          ],
          name: "getPaymentToken",
          outputs: [
            {
              components: [
                {
                  internalType: "contract IOracleOrL2OracleWithSequencerCheck",
                  name: "oracle",
                  type: "address",
                },
                {
                  internalType: "uint8",
                  name: "decimals",
                  type: "uint8",
                },
              ],
              internalType: "struct PaymentTokenInfo",
              name: "",
              type: "tuple",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_owner",
              type: "address",
            },
            {
              components: [
                {
                  internalType: "address payable",
                  name: "recipient",
                  type: "address",
                },
                {
                  internalType: "bytes32",
                  name: "merkleRoot",
                  type: "bytes32",
                },
                {
                  internalType: "uint256",
                  name: "saleMaximum",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "userMaximum",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "purchaseMinimum",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "startTime",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "endTime",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "maxQueueTime",
                  type: "uint256",
                },
                {
                  internalType: "string",
                  name: "URI",
                  type: "string",
                },
              ],
              internalType: "struct Config",
              name: "_config",
              type: "tuple",
            },
            {
              internalType: "string",
              name: "_baseCurrency",
              type: "string",
            },
            {
              internalType: "bool",
              name: "_nativePaymentsEnabled",
              type: "bool",
            },
            {
              internalType: "contract IOracleOrL2OracleWithSequencerCheck",
              name: "_nativeTokenPriceOracle",
              type: "address",
            },
            {
              internalType: "contract IERC20Upgradeable[]",
              name: "tokens",
              type: "address[]",
            },
            {
              internalType: "contract IOracleOrL2OracleWithSequencerCheck[]",
              name: "oracles",
              type: "address[]",
            },
            {
              internalType: "uint8[]",
              name: "decimals",
              type: "uint8[]",
            },
          ],
          name: "initialize",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "isOpen",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "isOver",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "root",
              type: "bytes32",
            },
            {
              internalType: "address",
              name: "account",
              type: "address",
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes",
            },
            {
              internalType: "bytes32[]",
              name: "proof",
              type: "bytes32[]",
            },
          ],
          name: "isValidMerkleProof",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
          stateMutability: "pure",
          type: "function",
        },
        {
          inputs: [],
          name: "metrics",
          outputs: [
            {
              internalType: "uint256",
              name: "purchaseCount",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "buyerCount",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "purchaseTotal",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "nativeTokenPriceOracle",
          outputs: [
            {
              internalType: "contract IOracleOrL2OracleWithSequencerCheck",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "owner",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "contract IERC20Upgradeable",
              name: "",
              type: "address",
            },
          ],
          name: "paymentTokens",
          outputs: [
            {
              internalType: "contract IOracleOrL2OracleWithSequencerCheck",
              name: "oracle",
              type: "address",
            },
            {
              internalType: "uint8",
              name: "decimals",
              type: "uint8",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "dest",
              type: "address",
            },
          ],
          name: "payments",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_distributor",
              type: "address",
            },
          ],
          name: "registerDistributor",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "renounceOwnership",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "sweepNative",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "contract IERC20Upgradeable",
              name: "token",
              type: "address",
            },
          ],
          name: "sweepToken",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "tokenQuantity",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "tokenDecimals",
              type: "uint256",
            },
            {
              internalType: "contract IOracleOrL2OracleWithSequencerCheck",
              name: "oracle",
              type: "address",
            },
          ],
          name: "tokensToBaseCurrency",
          outputs: [
            {
              internalType: "uint256",
              name: "value",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "total",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "newOwner",
              type: "address",
            },
          ],
          name: "transferOwnership",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              components: [
                {
                  internalType: "address payable",
                  name: "recipient",
                  type: "address",
                },
                {
                  internalType: "bytes32",
                  name: "merkleRoot",
                  type: "bytes32",
                },
                {
                  internalType: "uint256",
                  name: "saleMaximum",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "userMaximum",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "purchaseMinimum",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "startTime",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "endTime",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "maxQueueTime",
                  type: "uint256",
                },
                {
                  internalType: "string",
                  name: "URI",
                  type: "string",
                },
              ],
              internalType: "struct Config",
              name: "_config",
              type: "tuple",
            },
          ],
          name: "update",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address payable",
              name: "payee",
              type: "address",
            },
          ],
          name: "withdrawPayments",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
      ],
      inheritedFunctions: {
        buyWithNative: "contracts/sale/v2/Sale.sol",
        buyWithToken: "contracts/sale/v2/Sale.sol",
        buyerTotal: "contracts/sale/v2/Sale.sol",
        isOpen: "contracts/sale/v2/Sale.sol",
        isOver: "contracts/sale/v2/Sale.sol",
        isValidMerkleProof: "contracts/sale/v2/Sale.sol",
        owner: "contracts/sale/v2/Sale.sol",
        renounceOwnership: "contracts/sale/v2/Sale.sol",
        total: "contracts/sale/v2/Sale.sol",
        transferOwnership: "contracts/sale/v2/Sale.sol",
        payments:
          "@openzeppelin/contracts-upgradeable/security/PullPaymentUpgradeable.sol",
        withdrawPayments:
          "@openzeppelin/contracts-upgradeable/security/PullPaymentUpgradeable.sol",
      },
    },
    FlatPriceSaleFactory: {
      address: "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
      abi: [
        {
          inputs: [
            {
              internalType: "address",
              name: "_implementation",
              type: "address",
            },
          ],
          stateMutability: "nonpayable",
          type: "constructor",
        },
        {
          anonymous: false,
          inputs: [
            {
              indexed: true,
              internalType: "address",
              name: "implementation",
              type: "address",
            },
            {
              indexed: true,
              internalType: "contract FlatPriceSale",
              name: "clone",
              type: "address",
            },
            {
              components: [
                {
                  internalType: "address payable",
                  name: "recipient",
                  type: "address",
                },
                {
                  internalType: "bytes32",
                  name: "merkleRoot",
                  type: "bytes32",
                },
                {
                  internalType: "uint256",
                  name: "saleMaximum",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "userMaximum",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "purchaseMinimum",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "startTime",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "endTime",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "maxQueueTime",
                  type: "uint256",
                },
                {
                  internalType: "string",
                  name: "URI",
                  type: "string",
                },
              ],
              indexed: false,
              internalType: "struct Config",
              name: "config",
              type: "tuple",
            },
            {
              indexed: false,
              internalType: "string",
              name: "baseCurrency",
              type: "string",
            },
            {
              indexed: false,
              internalType: "contract IOracleOrL2OracleWithSequencerCheck",
              name: "nativeOracle",
              type: "address",
            },
            {
              indexed: false,
              internalType: "bool",
              name: "nativePaymentsEnabled",
              type: "bool",
            },
          ],
          name: "NewSale",
          type: "event",
        },
        {
          inputs: [],
          name: "VERSION",
          outputs: [
            {
              internalType: "string",
              name: "",
              type: "string",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "implementation",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "_owner",
              type: "address",
            },
            {
              components: [
                {
                  internalType: "address payable",
                  name: "recipient",
                  type: "address",
                },
                {
                  internalType: "bytes32",
                  name: "merkleRoot",
                  type: "bytes32",
                },
                {
                  internalType: "uint256",
                  name: "saleMaximum",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "userMaximum",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "purchaseMinimum",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "startTime",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "endTime",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "maxQueueTime",
                  type: "uint256",
                },
                {
                  internalType: "string",
                  name: "URI",
                  type: "string",
                },
              ],
              internalType: "struct Config",
              name: "_config",
              type: "tuple",
            },
            {
              internalType: "string",
              name: "_baseCurrency",
              type: "string",
            },
            {
              internalType: "bool",
              name: "_nativePaymentsEnabled",
              type: "bool",
            },
            {
              internalType: "contract IOracleOrL2OracleWithSequencerCheck",
              name: "_nativeTokenPriceOracle",
              type: "address",
            },
            {
              internalType: "contract IERC20Upgradeable[]",
              name: "tokens",
              type: "address[]",
            },
            {
              internalType: "contract IOracleOrL2OracleWithSequencerCheck[]",
              name: "oracles",
              type: "address[]",
            },
            {
              internalType: "uint8[]",
              name: "decimals",
              type: "uint8[]",
            },
          ],
          name: "newSale",
          outputs: [
            {
              internalType: "contract FlatPriceSale",
              name: "sale",
              type: "address",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
        },
      ],
      inheritedFunctions: {},
    },
  },
} as const;

export default deployedContracts satisfies GenericContractsDeclaration;
