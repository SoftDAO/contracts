// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class HashflowTradeSingleHop extends ethereum.Event {
  get params(): HashflowTradeSingleHop__Params {
    return new HashflowTradeSingleHop__Params(this);
  }
}

export class HashflowTradeSingleHop__Params {
  _event: HashflowTradeSingleHop;

  constructor(event: HashflowTradeSingleHop) {
    this._event = event;
  }

  get quote(): HashflowTradeSingleHopQuoteStruct {
    return changetype<HashflowTradeSingleHopQuoteStruct>(
      this._event.parameters[0].value.toTuple()
    );
  }
}

export class HashflowTradeSingleHopQuoteStruct extends ethereum.Tuple {
  get pool(): Address {
    return this[0].toAddress();
  }

  get externalAccount(): Address {
    return this[1].toAddress();
  }

  get trader(): Address {
    return this[2].toAddress();
  }

  get effectiveTrader(): Address {
    return this[3].toAddress();
  }

  get baseToken(): Address {
    return this[4].toAddress();
  }

  get quoteToken(): Address {
    return this[5].toAddress();
  }

  get effectiveBaseTokenAmount(): BigInt {
    return this[6].toBigInt();
  }

  get maxBaseTokenAmount(): BigInt {
    return this[7].toBigInt();
  }

  get maxQuoteTokenAmount(): BigInt {
    return this[8].toBigInt();
  }

  get quoteExpiry(): BigInt {
    return this[9].toBigInt();
  }

  get nonce(): BigInt {
    return this[10].toBigInt();
  }

  get txid(): Bytes {
    return this[11].toBytes();
  }

  get signature(): Bytes {
    return this[12].toBytes();
  }
}

export class HashflowTradeXChain extends ethereum.Event {
  get params(): HashflowTradeXChain__Params {
    return new HashflowTradeXChain__Params(this);
  }
}

export class HashflowTradeXChain__Params {
  _event: HashflowTradeXChain;

  constructor(event: HashflowTradeXChain) {
    this._event = event;
  }

  get quote(): HashflowTradeXChainQuoteStruct {
    return changetype<HashflowTradeXChainQuoteStruct>(
      this._event.parameters[0].value.toTuple()
    );
  }

  get protocol(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class HashflowTradeXChainQuoteStruct extends ethereum.Tuple {
  get srcChainId(): i32 {
    return this[0].toI32();
  }

  get dstChainId(): i32 {
    return this[1].toI32();
  }

  get srcPool(): Address {
    return this[2].toAddress();
  }

  get dstPool(): Bytes {
    return this[3].toBytes();
  }

  get srcExternalAccount(): Address {
    return this[4].toAddress();
  }

  get dstExternalAccount(): Bytes {
    return this[5].toBytes();
  }

  get trader(): Address {
    return this[6].toAddress();
  }

  get baseToken(): Address {
    return this[7].toAddress();
  }

  get quoteToken(): Address {
    return this[8].toAddress();
  }

  get baseTokenAmount(): BigInt {
    return this[9].toBigInt();
  }

  get quoteTokenAmount(): BigInt {
    return this[10].toBigInt();
  }

  get quoteExpiry(): BigInt {
    return this[11].toBigInt();
  }

  get nonce(): BigInt {
    return this[12].toBigInt();
  }

  get txid(): Bytes {
    return this[13].toBytes();
  }

  get signature(): Bytes {
    return this[14].toBytes();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SetConfig extends ethereum.Event {
  get params(): SetConfig__Params {
    return new SetConfig__Params(this);
  }
}

export class SetConfig__Params {
  _event: SetConfig;

  constructor(event: SetConfig) {
    this._event = event;
  }

  get router(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get feeBips(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SetSweepRecipient extends ethereum.Event {
  get params(): SetSweepRecipient__Params {
    return new SetSweepRecipient__Params(this);
  }
}

export class SetSweepRecipient__Params {
  _event: SetSweepRecipient;

  constructor(event: SetSweepRecipient) {
    this._event = event;
  }

  get recipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SweepNative extends ethereum.Event {
  get params(): SweepNative__Params {
    return new SweepNative__Params(this);
  }
}

export class SweepNative__Params {
  _event: SweepNative;

  constructor(event: SweepNative) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SweepToken extends ethereum.Event {
  get params(): SweepToken__Params {
    return new SweepToken__Params(this);
  }
}

export class SweepToken__Params {
  _event: SweepToken;

  constructor(event: SweepToken) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Trader__getConfigResult {
  value0: Address;
  value1: BigInt;
  value2: Address;

  constructor(value0: Address, value1: BigInt, value2: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    return map;
  }

  getValue0(): Address {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }

  getValue2(): Address {
    return this.value2;
  }
}

export class Trader__getSplitResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getBaseTokenTotal(): BigInt {
    return this.value0;
  }

  getBaseTokenAmount(): BigInt {
    return this.value1;
  }

  getBaseTokenFee(): BigInt {
    return this.value2;
  }
}

export class Trader extends ethereum.SmartContract {
  static bind(address: Address): Trader {
    return new Trader("Trader", address);
  }

  getConfig(): Trader__getConfigResult {
    let result = super.call(
      "getConfig",
      "getConfig():(address,uint256,address)",
      []
    );

    return new Trader__getConfigResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toAddress()
    );
  }

  try_getConfig(): ethereum.CallResult<Trader__getConfigResult> {
    let result = super.tryCall(
      "getConfig",
      "getConfig():(address,uint256,address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Trader__getConfigResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toAddress()
      )
    );
  }

  getFee(baseTokenAmount: BigInt): BigInt {
    let result = super.call("getFee", "getFee(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(baseTokenAmount)
    ]);

    return result[0].toBigInt();
  }

  try_getFee(baseTokenAmount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getFee", "getFee(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(baseTokenAmount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSplit(initialTotal: BigInt): Trader__getSplitResult {
    let result = super.call(
      "getSplit",
      "getSplit(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(initialTotal)]
    );

    return new Trader__getSplitResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getSplit(
    initialTotal: BigInt
  ): ethereum.CallResult<Trader__getSplitResult> {
    let result = super.tryCall(
      "getSplit",
      "getSplit(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(initialTotal)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Trader__getSplitResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getSweepRecipient(): Address {
    let result = super.call(
      "getSweepRecipient",
      "getSweepRecipient():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getSweepRecipient(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getSweepRecipient",
      "getSweepRecipient():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _router(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _feeBips(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _feeRecipient(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetConfigCall extends ethereum.Call {
  get inputs(): SetConfigCall__Inputs {
    return new SetConfigCall__Inputs(this);
  }

  get outputs(): SetConfigCall__Outputs {
    return new SetConfigCall__Outputs(this);
  }
}

export class SetConfigCall__Inputs {
  _call: SetConfigCall;

  constructor(call: SetConfigCall) {
    this._call = call;
  }

  get _router(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _feeBips(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _feeRecipient(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class SetConfigCall__Outputs {
  _call: SetConfigCall;

  constructor(call: SetConfigCall) {
    this._call = call;
  }
}

export class SweepNativeCall extends ethereum.Call {
  get inputs(): SweepNativeCall__Inputs {
    return new SweepNativeCall__Inputs(this);
  }

  get outputs(): SweepNativeCall__Outputs {
    return new SweepNativeCall__Outputs(this);
  }
}

export class SweepNativeCall__Inputs {
  _call: SweepNativeCall;

  constructor(call: SweepNativeCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SweepNativeCall__Outputs {
  _call: SweepNativeCall;

  constructor(call: SweepNativeCall) {
    this._call = call;
  }
}

export class SweepNative1Call extends ethereum.Call {
  get inputs(): SweepNative1Call__Inputs {
    return new SweepNative1Call__Inputs(this);
  }

  get outputs(): SweepNative1Call__Outputs {
    return new SweepNative1Call__Outputs(this);
  }
}

export class SweepNative1Call__Inputs {
  _call: SweepNative1Call;

  constructor(call: SweepNative1Call) {
    this._call = call;
  }
}

export class SweepNative1Call__Outputs {
  _call: SweepNative1Call;

  constructor(call: SweepNative1Call) {
    this._call = call;
  }
}

export class SweepTokenCall extends ethereum.Call {
  get inputs(): SweepTokenCall__Inputs {
    return new SweepTokenCall__Inputs(this);
  }

  get outputs(): SweepTokenCall__Outputs {
    return new SweepTokenCall__Outputs(this);
  }
}

export class SweepTokenCall__Inputs {
  _call: SweepTokenCall;

  constructor(call: SweepTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SweepTokenCall__Outputs {
  _call: SweepTokenCall;

  constructor(call: SweepTokenCall) {
    this._call = call;
  }
}

export class SweepToken1Call extends ethereum.Call {
  get inputs(): SweepToken1Call__Inputs {
    return new SweepToken1Call__Inputs(this);
  }

  get outputs(): SweepToken1Call__Outputs {
    return new SweepToken1Call__Outputs(this);
  }
}

export class SweepToken1Call__Inputs {
  _call: SweepToken1Call;

  constructor(call: SweepToken1Call) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SweepToken1Call__Outputs {
  _call: SweepToken1Call;

  constructor(call: SweepToken1Call) {
    this._call = call;
  }
}

export class TradeSingleHopCall extends ethereum.Call {
  get inputs(): TradeSingleHopCall__Inputs {
    return new TradeSingleHopCall__Inputs(this);
  }

  get outputs(): TradeSingleHopCall__Outputs {
    return new TradeSingleHopCall__Outputs(this);
  }
}

export class TradeSingleHopCall__Inputs {
  _call: TradeSingleHopCall;

  constructor(call: TradeSingleHopCall) {
    this._call = call;
  }

  get quote(): TradeSingleHopCallQuoteStruct {
    return changetype<TradeSingleHopCallQuoteStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class TradeSingleHopCall__Outputs {
  _call: TradeSingleHopCall;

  constructor(call: TradeSingleHopCall) {
    this._call = call;
  }
}

export class TradeSingleHopCallQuoteStruct extends ethereum.Tuple {
  get pool(): Address {
    return this[0].toAddress();
  }

  get externalAccount(): Address {
    return this[1].toAddress();
  }

  get trader(): Address {
    return this[2].toAddress();
  }

  get effectiveTrader(): Address {
    return this[3].toAddress();
  }

  get baseToken(): Address {
    return this[4].toAddress();
  }

  get quoteToken(): Address {
    return this[5].toAddress();
  }

  get effectiveBaseTokenAmount(): BigInt {
    return this[6].toBigInt();
  }

  get maxBaseTokenAmount(): BigInt {
    return this[7].toBigInt();
  }

  get maxQuoteTokenAmount(): BigInt {
    return this[8].toBigInt();
  }

  get quoteExpiry(): BigInt {
    return this[9].toBigInt();
  }

  get nonce(): BigInt {
    return this[10].toBigInt();
  }

  get txid(): Bytes {
    return this[11].toBytes();
  }

  get signature(): Bytes {
    return this[12].toBytes();
  }
}

export class TradeXChainCall extends ethereum.Call {
  get inputs(): TradeXChainCall__Inputs {
    return new TradeXChainCall__Inputs(this);
  }

  get outputs(): TradeXChainCall__Outputs {
    return new TradeXChainCall__Outputs(this);
  }
}

export class TradeXChainCall__Inputs {
  _call: TradeXChainCall;

  constructor(call: TradeXChainCall) {
    this._call = call;
  }

  get quote(): TradeXChainCallQuoteStruct {
    return changetype<TradeXChainCallQuoteStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get protocol(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class TradeXChainCall__Outputs {
  _call: TradeXChainCall;

  constructor(call: TradeXChainCall) {
    this._call = call;
  }
}

export class TradeXChainCallQuoteStruct extends ethereum.Tuple {
  get srcChainId(): i32 {
    return this[0].toI32();
  }

  get dstChainId(): i32 {
    return this[1].toI32();
  }

  get srcPool(): Address {
    return this[2].toAddress();
  }

  get dstPool(): Bytes {
    return this[3].toBytes();
  }

  get srcExternalAccount(): Address {
    return this[4].toAddress();
  }

  get dstExternalAccount(): Bytes {
    return this[5].toBytes();
  }

  get trader(): Address {
    return this[6].toAddress();
  }

  get baseToken(): Address {
    return this[7].toAddress();
  }

  get quoteToken(): Address {
    return this[8].toAddress();
  }

  get baseTokenAmount(): BigInt {
    return this[9].toBigInt();
  }

  get quoteTokenAmount(): BigInt {
    return this[10].toBigInt();
  }

  get quoteExpiry(): BigInt {
    return this[11].toBigInt();
  }

  get nonce(): BigInt {
    return this[12].toBigInt();
  }

  get txid(): Bytes {
    return this[13].toBytes();
  }

  get signature(): Bytes {
    return this[14].toBytes();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
