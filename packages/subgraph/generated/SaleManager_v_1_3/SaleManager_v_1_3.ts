// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Buy extends ethereum.Event {
  get params(): Buy__Params {
    return new Buy__Params(this);
  }
}

export class Buy__Params {
  _event: Buy;

  constructor(event: Buy) {
    this._event = event;
  }

  get saleId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get buyer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get native(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }

  get proof(): Array<Bytes> {
    return this._event.parameters[4].value.toBytesArray();
  }
}

export class Deploy extends ethereum.Event {
  get params(): Deploy__Params {
    return new Deploy__Params(this);
  }
}

export class Deploy__Params {
  _event: Deploy;

  constructor(event: Deploy) {
    this._event = event;
  }

  get paymentToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get paymentTokenDecimals(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get priceOracle(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class NewSale extends ethereum.Event {
  get params(): NewSale__Params {
    return new NewSale__Params(this);
  }
}

export class NewSale__Params {
  _event: NewSale;

  constructor(event: NewSale) {
    this._event = event;
  }

  get saleId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get merkleRoot(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get recipient(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get admin(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get saleBuyLimit(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get userBuyLimit(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get purchaseMinimum(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get maxQueueTime(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get startTime(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get endTime(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }

  get uri(): string {
    return this._event.parameters[10].value.toString();
  }

  get price(): BigInt {
    return this._event.parameters[11].value.toBigInt();
  }

  get decimals(): i32 {
    return this._event.parameters[12].value.toI32();
  }
}

export class RegisterClaimManager extends ethereum.Event {
  get params(): RegisterClaimManager__Params {
    return new RegisterClaimManager__Params(this);
  }
}

export class RegisterClaimManager__Params {
  _event: RegisterClaimManager;

  constructor(event: RegisterClaimManager) {
    this._event = event;
  }

  get saleId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get claimManager(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class UpdateEnd extends ethereum.Event {
  get params(): UpdateEnd__Params {
    return new UpdateEnd__Params(this);
  }
}

export class UpdateEnd__Params {
  _event: UpdateEnd;

  constructor(event: UpdateEnd) {
    this._event = event;
  }

  get saleId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get endTime(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UpdateMaxQueueTime extends ethereum.Event {
  get params(): UpdateMaxQueueTime__Params {
    return new UpdateMaxQueueTime__Params(this);
  }
}

export class UpdateMaxQueueTime__Params {
  _event: UpdateMaxQueueTime;

  constructor(event: UpdateMaxQueueTime) {
    this._event = event;
  }

  get saleId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get maxQueueTime(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UpdateMerkleRoot extends ethereum.Event {
  get params(): UpdateMerkleRoot__Params {
    return new UpdateMerkleRoot__Params(this);
  }
}

export class UpdateMerkleRoot__Params {
  _event: UpdateMerkleRoot;

  constructor(event: UpdateMerkleRoot) {
    this._event = event;
  }

  get saleId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get merkleRoot(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class UpdateStart extends ethereum.Event {
  get params(): UpdateStart__Params {
    return new UpdateStart__Params(this);
  }
}

export class UpdateStart__Params {
  _event: UpdateStart;

  constructor(event: UpdateStart) {
    this._event = event;
  }

  get saleId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get startTime(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UpdateUri extends ethereum.Event {
  get params(): UpdateUri__Params {
    return new UpdateUri__Params(this);
  }
}

export class UpdateUri__Params {
  _event: UpdateUri;

  constructor(event: UpdateUri) {
    this._event = event;
  }

  get saleId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get uri(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class SaleManager_v_1_3 extends ethereum.SmartContract {
  static bind(address: Address): SaleManager_v_1_3 {
    return new SaleManager_v_1_3("SaleManager_v_1_3", address);
  }

  VERSION(): string {
    let result = super.call("VERSION", "VERSION():(string)", []);

    return result[0].toString();
  }

  try_VERSION(): ethereum.CallResult<string> {
    let result = super.tryCall("VERSION", "VERSION():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  _isAllowed(root: Bytes, account: Address, proof: Array<Bytes>): boolean {
    let result = super.call(
      "_isAllowed",
      "_isAllowed(bytes32,address,bytes32[]):(bool)",
      [
        ethereum.Value.fromFixedBytes(root),
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromFixedBytesArray(proof)
      ]
    );

    return result[0].toBoolean();
  }

  try__isAllowed(
    root: Bytes,
    account: Address,
    proof: Array<Bytes>
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "_isAllowed",
      "_isAllowed(bytes32,address,bytes32[]):(bool)",
      [
        ethereum.Value.fromFixedBytes(root),
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromFixedBytesArray(proof)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  generateRandomishValue(merkleRoot: Bytes): BigInt {
    let result = super.call(
      "generateRandomishValue",
      "generateRandomishValue(bytes32):(uint160)",
      [ethereum.Value.fromFixedBytes(merkleRoot)]
    );

    return result[0].toBigInt();
  }

  try_generateRandomishValue(merkleRoot: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "generateRandomishValue",
      "generateRandomishValue(bytes32):(uint160)",
      [ethereum.Value.fromFixedBytes(merkleRoot)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAdmin(saleId: Bytes): Address {
    let result = super.call("getAdmin", "getAdmin(bytes32):(address)", [
      ethereum.Value.fromFixedBytes(saleId)
    ]);

    return result[0].toAddress();
  }

  try_getAdmin(saleId: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall("getAdmin", "getAdmin(bytes32):(address)", [
      ethereum.Value.fromFixedBytes(saleId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getBought(saleId: Bytes, userAddress: Address): BigInt {
    let result = super.call(
      "getBought",
      "getBought(bytes32,address):(uint256)",
      [
        ethereum.Value.fromFixedBytes(saleId),
        ethereum.Value.fromAddress(userAddress)
      ]
    );

    return result[0].toBigInt();
  }

  try_getBought(
    saleId: Bytes,
    userAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBought",
      "getBought(bytes32,address):(uint256)",
      [
        ethereum.Value.fromFixedBytes(saleId),
        ethereum.Value.fromAddress(userAddress)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getClaimManager(saleId: Bytes): Address {
    let result = super.call(
      "getClaimManager",
      "getClaimManager(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(saleId)]
    );

    return result[0].toAddress();
  }

  try_getClaimManager(saleId: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getClaimManager",
      "getClaimManager(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(saleId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getDecimals(saleId: Bytes): BigInt {
    let result = super.call("getDecimals", "getDecimals(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(saleId)
    ]);

    return result[0].toBigInt();
  }

  try_getDecimals(saleId: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDecimals",
      "getDecimals(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(saleId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEndTime(saleId: Bytes): BigInt {
    let result = super.call("getEndTime", "getEndTime(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(saleId)
    ]);

    return result[0].toBigInt();
  }

  try_getEndTime(saleId: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getEndTime", "getEndTime(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(saleId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getFairQueueTime(saleId: Bytes, buyer: Address): BigInt {
    let result = super.call(
      "getFairQueueTime",
      "getFairQueueTime(bytes32,address):(uint256)",
      [ethereum.Value.fromFixedBytes(saleId), ethereum.Value.fromAddress(buyer)]
    );

    return result[0].toBigInt();
  }

  try_getFairQueueTime(
    saleId: Bytes,
    buyer: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getFairQueueTime",
      "getFairQueueTime(bytes32,address):(uint256)",
      [ethereum.Value.fromFixedBytes(saleId), ethereum.Value.fromAddress(buyer)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLatestPrice(): BigInt {
    let result = super.call("getLatestPrice", "getLatestPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getLatestPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLatestPrice",
      "getLatestPrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMaxQueueTime(saleId: Bytes): BigInt {
    let result = super.call(
      "getMaxQueueTime",
      "getMaxQueueTime(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(saleId)]
    );

    return result[0].toBigInt();
  }

  try_getMaxQueueTime(saleId: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMaxQueueTime",
      "getMaxQueueTime(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(saleId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMerkleRoot(saleId: Bytes): Bytes {
    let result = super.call(
      "getMerkleRoot",
      "getMerkleRoot(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(saleId)]
    );

    return result[0].toBytes();
  }

  try_getMerkleRoot(saleId: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getMerkleRoot",
      "getMerkleRoot(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(saleId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getPrice(saleId: Bytes): BigInt {
    let result = super.call("getPrice", "getPrice(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(saleId)
    ]);

    return result[0].toBigInt();
  }

  try_getPrice(saleId: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getPrice", "getPrice(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(saleId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPriceOracle(): Address {
    let result = super.call("getPriceOracle", "getPriceOracle():(address)", []);

    return result[0].toAddress();
  }

  try_getPriceOracle(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getPriceOracle",
      "getPriceOracle():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPurchaseMinimum(saleId: Bytes): BigInt {
    let result = super.call(
      "getPurchaseMinimum",
      "getPurchaseMinimum(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(saleId)]
    );

    return result[0].toBigInt();
  }

  try_getPurchaseMinimum(saleId: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPurchaseMinimum",
      "getPurchaseMinimum(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(saleId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRandomValue(saleId: Bytes): BigInt {
    let result = super.call(
      "getRandomValue",
      "getRandomValue(bytes32):(uint160)",
      [ethereum.Value.fromFixedBytes(saleId)]
    );

    return result[0].toBigInt();
  }

  try_getRandomValue(saleId: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRandomValue",
      "getRandomValue(bytes32):(uint160)",
      [ethereum.Value.fromFixedBytes(saleId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRecipient(saleId: Bytes): Address {
    let result = super.call("getRecipient", "getRecipient(bytes32):(address)", [
      ethereum.Value.fromFixedBytes(saleId)
    ]);

    return result[0].toAddress();
  }

  try_getRecipient(saleId: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getRecipient",
      "getRecipient(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(saleId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getSaleBuyLimit(saleId: Bytes): BigInt {
    let result = super.call(
      "getSaleBuyLimit",
      "getSaleBuyLimit(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(saleId)]
    );

    return result[0].toBigInt();
  }

  try_getSaleBuyLimit(saleId: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSaleBuyLimit",
      "getSaleBuyLimit(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(saleId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSpent(saleId: Bytes, userAddress: Address): BigInt {
    let result = super.call("getSpent", "getSpent(bytes32,address):(uint256)", [
      ethereum.Value.fromFixedBytes(saleId),
      ethereum.Value.fromAddress(userAddress)
    ]);

    return result[0].toBigInt();
  }

  try_getSpent(
    saleId: Bytes,
    userAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSpent",
      "getSpent(bytes32,address):(uint256)",
      [
        ethereum.Value.fromFixedBytes(saleId),
        ethereum.Value.fromAddress(userAddress)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStartTime(saleId: Bytes): BigInt {
    let result = super.call("getStartTime", "getStartTime(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(saleId)
    ]);

    return result[0].toBigInt();
  }

  try_getStartTime(saleId: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStartTime",
      "getStartTime(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(saleId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalSpent(saleId: Bytes): BigInt {
    let result = super.call(
      "getTotalSpent",
      "getTotalSpent(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(saleId)]
    );

    return result[0].toBigInt();
  }

  try_getTotalSpent(saleId: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalSpent",
      "getTotalSpent(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(saleId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUri(saleId: Bytes): string {
    let result = super.call("getUri", "getUri(bytes32):(string)", [
      ethereum.Value.fromFixedBytes(saleId)
    ]);

    return result[0].toString();
  }

  try_getUri(saleId: Bytes): ethereum.CallResult<string> {
    let result = super.tryCall("getUri", "getUri(bytes32):(string)", [
      ethereum.Value.fromFixedBytes(saleId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getUserBuyLimit(saleId: Bytes): BigInt {
    let result = super.call(
      "getUserBuyLimit",
      "getUserBuyLimit(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(saleId)]
    );

    return result[0].toBigInt();
  }

  try_getUserBuyLimit(saleId: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserBuyLimit",
      "getUserBuyLimit(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(saleId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isOpen(saleId: Bytes): boolean {
    let result = super.call("isOpen", "isOpen(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(saleId)
    ]);

    return result[0].toBoolean();
  }

  try_isOpen(saleId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOpen", "isOpen(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(saleId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isOver(saleId: Bytes): boolean {
    let result = super.call("isOver", "isOver(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(saleId)
    ]);

    return result[0].toBoolean();
  }

  try_isOver(saleId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOver", "isOver(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(saleId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  nativeToPaymentToken(nativeValue: BigInt): BigInt {
    let result = super.call(
      "nativeToPaymentToken",
      "nativeToPaymentToken(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(nativeValue)]
    );

    return result[0].toBigInt();
  }

  try_nativeToPaymentToken(nativeValue: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nativeToPaymentToken",
      "nativeToPaymentToken(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(nativeValue)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  newSale(
    recipient: Address,
    merkleRoot: Bytes,
    saleBuyLimit: BigInt,
    userBuyLimit: BigInt,
    purchaseMinimum: BigInt,
    startTime: BigInt,
    endTime: BigInt,
    maxQueueTime: BigInt,
    uri: string,
    price: BigInt,
    decimals: i32
  ): Bytes {
    let result = super.call(
      "newSale",
      "newSale(address,bytes32,uint256,uint256,uint256,uint256,uint256,uint160,string,uint256,uint8):(bytes32)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromFixedBytes(merkleRoot),
        ethereum.Value.fromUnsignedBigInt(saleBuyLimit),
        ethereum.Value.fromUnsignedBigInt(userBuyLimit),
        ethereum.Value.fromUnsignedBigInt(purchaseMinimum),
        ethereum.Value.fromUnsignedBigInt(startTime),
        ethereum.Value.fromUnsignedBigInt(endTime),
        ethereum.Value.fromUnsignedBigInt(maxQueueTime),
        ethereum.Value.fromString(uri),
        ethereum.Value.fromUnsignedBigInt(price),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(decimals))
      ]
    );

    return result[0].toBytes();
  }

  try_newSale(
    recipient: Address,
    merkleRoot: Bytes,
    saleBuyLimit: BigInt,
    userBuyLimit: BigInt,
    purchaseMinimum: BigInt,
    startTime: BigInt,
    endTime: BigInt,
    maxQueueTime: BigInt,
    uri: string,
    price: BigInt,
    decimals: i32
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "newSale",
      "newSale(address,bytes32,uint256,uint256,uint256,uint256,uint256,uint160,string,uint256,uint8):(bytes32)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromFixedBytes(merkleRoot),
        ethereum.Value.fromUnsignedBigInt(saleBuyLimit),
        ethereum.Value.fromUnsignedBigInt(userBuyLimit),
        ethereum.Value.fromUnsignedBigInt(purchaseMinimum),
        ethereum.Value.fromUnsignedBigInt(startTime),
        ethereum.Value.fromUnsignedBigInt(endTime),
        ethereum.Value.fromUnsignedBigInt(maxQueueTime),
        ethereum.Value.fromString(uri),
        ethereum.Value.fromUnsignedBigInt(price),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(decimals))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  paymentToken(): Address {
    let result = super.call("paymentToken", "paymentToken():(address)", []);

    return result[0].toAddress();
  }

  try_paymentToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("paymentToken", "paymentToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paymentTokenDecimals(): i32 {
    let result = super.call(
      "paymentTokenDecimals",
      "paymentTokenDecimals():(uint8)",
      []
    );

    return result[0].toI32();
  }

  try_paymentTokenDecimals(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "paymentTokenDecimals",
      "paymentTokenDecimals():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  payments(dest: Address): BigInt {
    let result = super.call("payments", "payments(address):(uint256)", [
      ethereum.Value.fromAddress(dest)
    ]);

    return result[0].toBigInt();
  }

  try_payments(dest: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("payments", "payments(address):(uint256)", [
      ethereum.Value.fromAddress(dest)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  saleCount(): BigInt {
    let result = super.call("saleCount", "saleCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_saleCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("saleCount", "saleCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  spentToBought(saleId: Bytes, spent: BigInt): BigInt {
    let result = super.call(
      "spentToBought",
      "spentToBought(bytes32,uint256):(uint256)",
      [
        ethereum.Value.fromFixedBytes(saleId),
        ethereum.Value.fromUnsignedBigInt(spent)
      ]
    );

    return result[0].toBigInt();
  }

  try_spentToBought(saleId: Bytes, spent: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "spentToBought",
      "spentToBought(bytes32,uint256):(uint256)",
      [
        ethereum.Value.fromFixedBytes(saleId),
        ethereum.Value.fromUnsignedBigInt(spent)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSpent(): BigInt {
    let result = super.call("totalSpent", "totalSpent():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSpent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSpent", "totalSpent():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _paymentToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _paymentTokenDecimals(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get _priceOracle(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BuyCall extends ethereum.Call {
  get inputs(): BuyCall__Inputs {
    return new BuyCall__Inputs(this);
  }

  get outputs(): BuyCall__Outputs {
    return new BuyCall__Outputs(this);
  }
}

export class BuyCall__Inputs {
  _call: BuyCall;

  constructor(call: BuyCall) {
    this._call = call;
  }

  get saleId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get proof(): Array<Bytes> {
    return this._call.inputValues[1].value.toBytesArray();
  }
}

export class BuyCall__Outputs {
  _call: BuyCall;

  constructor(call: BuyCall) {
    this._call = call;
  }
}

export class Buy1Call extends ethereum.Call {
  get inputs(): Buy1Call__Inputs {
    return new Buy1Call__Inputs(this);
  }

  get outputs(): Buy1Call__Outputs {
    return new Buy1Call__Outputs(this);
  }
}

export class Buy1Call__Inputs {
  _call: Buy1Call;

  constructor(call: Buy1Call) {
    this._call = call;
  }

  get saleId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get tokenQuantity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get proof(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }
}

export class Buy1Call__Outputs {
  _call: Buy1Call;

  constructor(call: Buy1Call) {
    this._call = call;
  }
}

export class NewSaleCall extends ethereum.Call {
  get inputs(): NewSaleCall__Inputs {
    return new NewSaleCall__Inputs(this);
  }

  get outputs(): NewSaleCall__Outputs {
    return new NewSaleCall__Outputs(this);
  }
}

export class NewSaleCall__Inputs {
  _call: NewSaleCall;

  constructor(call: NewSaleCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get merkleRoot(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get saleBuyLimit(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get userBuyLimit(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get purchaseMinimum(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get startTime(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get endTime(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get maxQueueTime(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get uri(): string {
    return this._call.inputValues[8].value.toString();
  }

  get price(): BigInt {
    return this._call.inputValues[9].value.toBigInt();
  }

  get decimals(): i32 {
    return this._call.inputValues[10].value.toI32();
  }
}

export class NewSaleCall__Outputs {
  _call: NewSaleCall;

  constructor(call: NewSaleCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RecoverERC20Call extends ethereum.Call {
  get inputs(): RecoverERC20Call__Inputs {
    return new RecoverERC20Call__Inputs(this);
  }

  get outputs(): RecoverERC20Call__Outputs {
    return new RecoverERC20Call__Outputs(this);
  }
}

export class RecoverERC20Call__Inputs {
  _call: RecoverERC20Call;

  constructor(call: RecoverERC20Call) {
    this._call = call;
  }

  get saleId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get tokenAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RecoverERC20Call__Outputs {
  _call: RecoverERC20Call;

  constructor(call: RecoverERC20Call) {
    this._call = call;
  }
}

export class RegisterClaimManagerCall extends ethereum.Call {
  get inputs(): RegisterClaimManagerCall__Inputs {
    return new RegisterClaimManagerCall__Inputs(this);
  }

  get outputs(): RegisterClaimManagerCall__Outputs {
    return new RegisterClaimManagerCall__Outputs(this);
  }
}

export class RegisterClaimManagerCall__Inputs {
  _call: RegisterClaimManagerCall;

  constructor(call: RegisterClaimManagerCall) {
    this._call = call;
  }

  get saleId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get claimManager(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RegisterClaimManagerCall__Outputs {
  _call: RegisterClaimManagerCall;

  constructor(call: RegisterClaimManagerCall) {
    this._call = call;
  }
}

export class SetEndCall extends ethereum.Call {
  get inputs(): SetEndCall__Inputs {
    return new SetEndCall__Inputs(this);
  }

  get outputs(): SetEndCall__Outputs {
    return new SetEndCall__Outputs(this);
  }
}

export class SetEndCall__Inputs {
  _call: SetEndCall;

  constructor(call: SetEndCall) {
    this._call = call;
  }

  get saleId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get endTime(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetEndCall__Outputs {
  _call: SetEndCall;

  constructor(call: SetEndCall) {
    this._call = call;
  }
}

export class SetMaxQueueTimeCall extends ethereum.Call {
  get inputs(): SetMaxQueueTimeCall__Inputs {
    return new SetMaxQueueTimeCall__Inputs(this);
  }

  get outputs(): SetMaxQueueTimeCall__Outputs {
    return new SetMaxQueueTimeCall__Outputs(this);
  }
}

export class SetMaxQueueTimeCall__Inputs {
  _call: SetMaxQueueTimeCall;

  constructor(call: SetMaxQueueTimeCall) {
    this._call = call;
  }

  get saleId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get maxQueueTime(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetMaxQueueTimeCall__Outputs {
  _call: SetMaxQueueTimeCall;

  constructor(call: SetMaxQueueTimeCall) {
    this._call = call;
  }
}

export class SetMerkleRootCall extends ethereum.Call {
  get inputs(): SetMerkleRootCall__Inputs {
    return new SetMerkleRootCall__Inputs(this);
  }

  get outputs(): SetMerkleRootCall__Outputs {
    return new SetMerkleRootCall__Outputs(this);
  }
}

export class SetMerkleRootCall__Inputs {
  _call: SetMerkleRootCall;

  constructor(call: SetMerkleRootCall) {
    this._call = call;
  }

  get saleId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get merkleRoot(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SetMerkleRootCall__Outputs {
  _call: SetMerkleRootCall;

  constructor(call: SetMerkleRootCall) {
    this._call = call;
  }
}

export class SetStartCall extends ethereum.Call {
  get inputs(): SetStartCall__Inputs {
    return new SetStartCall__Inputs(this);
  }

  get outputs(): SetStartCall__Outputs {
    return new SetStartCall__Outputs(this);
  }
}

export class SetStartCall__Inputs {
  _call: SetStartCall;

  constructor(call: SetStartCall) {
    this._call = call;
  }

  get saleId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get startTime(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetStartCall__Outputs {
  _call: SetStartCall;

  constructor(call: SetStartCall) {
    this._call = call;
  }
}

export class SetUriAndMerkleRootCall extends ethereum.Call {
  get inputs(): SetUriAndMerkleRootCall__Inputs {
    return new SetUriAndMerkleRootCall__Inputs(this);
  }

  get outputs(): SetUriAndMerkleRootCall__Outputs {
    return new SetUriAndMerkleRootCall__Outputs(this);
  }
}

export class SetUriAndMerkleRootCall__Inputs {
  _call: SetUriAndMerkleRootCall;

  constructor(call: SetUriAndMerkleRootCall) {
    this._call = call;
  }

  get saleId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get merkleRoot(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get uri(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class SetUriAndMerkleRootCall__Outputs {
  _call: SetUriAndMerkleRootCall;

  constructor(call: SetUriAndMerkleRootCall) {
    this._call = call;
  }
}

export class WithdrawPaymentsCall extends ethereum.Call {
  get inputs(): WithdrawPaymentsCall__Inputs {
    return new WithdrawPaymentsCall__Inputs(this);
  }

  get outputs(): WithdrawPaymentsCall__Outputs {
    return new WithdrawPaymentsCall__Outputs(this);
  }
}

export class WithdrawPaymentsCall__Inputs {
  _call: WithdrawPaymentsCall;

  constructor(call: WithdrawPaymentsCall) {
    this._call = call;
  }

  get payee(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawPaymentsCall__Outputs {
  _call: WithdrawPaymentsCall;

  constructor(call: WithdrawPaymentsCall) {
    this._call = call;
  }
}
