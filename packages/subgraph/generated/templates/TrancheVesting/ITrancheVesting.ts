// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class SetTranche extends ethereum.Event {
  get params(): SetTranche__Params {
    return new SetTranche__Params(this);
  }
}

export class SetTranche__Params {
  _event: SetTranche;

  constructor(event: SetTranche) {
    this._event = event;
  }

  get index(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get time(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get VestedFraction(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ITrancheVesting__getTrancheResultValue0Struct extends ethereum.Tuple {
  get time(): BigInt {
    return this[0].toBigInt();
  }

  get vestedFraction(): BigInt {
    return this[1].toBigInt();
  }
}

export class ITrancheVesting__getTranchesResultValue0Struct extends ethereum.Tuple {
  get time(): BigInt {
    return this[0].toBigInt();
  }

  get vestedFraction(): BigInt {
    return this[1].toBigInt();
  }
}

export class ITrancheVesting extends ethereum.SmartContract {
  static bind(address: Address): ITrancheVesting {
    return new ITrancheVesting("ITrancheVesting", address);
  }

  getTranche(i: BigInt): ITrancheVesting__getTrancheResultValue0Struct {
    let result = super.call(
      "getTranche",
      "getTranche(uint256):((uint128,uint128))",
      [ethereum.Value.fromUnsignedBigInt(i)]
    );

    return changetype<ITrancheVesting__getTrancheResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getTranche(
    i: BigInt
  ): ethereum.CallResult<ITrancheVesting__getTrancheResultValue0Struct> {
    let result = super.tryCall(
      "getTranche",
      "getTranche(uint256):((uint128,uint128))",
      [ethereum.Value.fromUnsignedBigInt(i)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<ITrancheVesting__getTrancheResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getTranches(): Array<ITrancheVesting__getTranchesResultValue0Struct> {
    let result = super.call(
      "getTranches",
      "getTranches():((uint128,uint128)[])",
      []
    );

    return result[0].toTupleArray<
      ITrancheVesting__getTranchesResultValue0Struct
    >();
  }

  try_getTranches(): ethereum.CallResult<
    Array<ITrancheVesting__getTranchesResultValue0Struct>
  > {
    let result = super.tryCall(
      "getTranches",
      "getTranches():((uint128,uint128)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<ITrancheVesting__getTranchesResultValue0Struct>()
    );
  }
}

export class SetTranchesCall extends ethereum.Call {
  get inputs(): SetTranchesCall__Inputs {
    return new SetTranchesCall__Inputs(this);
  }

  get outputs(): SetTranchesCall__Outputs {
    return new SetTranchesCall__Outputs(this);
  }
}

export class SetTranchesCall__Inputs {
  _call: SetTranchesCall;

  constructor(call: SetTranchesCall) {
    this._call = call;
  }

  get _tranches(): Array<SetTranchesCall_tranchesStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      SetTranchesCall_tranchesStruct
    >();
  }
}

export class SetTranchesCall__Outputs {
  _call: SetTranchesCall;

  constructor(call: SetTranchesCall) {
    this._call = call;
  }
}

export class SetTranchesCall_tranchesStruct extends ethereum.Tuple {
  get time(): BigInt {
    return this[0].toBigInt();
  }

  get vestedFraction(): BigInt {
    return this[1].toBigInt();
  }
}
